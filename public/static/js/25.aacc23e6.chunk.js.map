{"version":3,"sources":["helpers/datagridExporter.js","pages/admin section/packages/Promotions.js"],"names":["e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","t","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","dataField","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","Promotions","PERMISSIONS","useTranslation","basic","title","dataSource","promotionsDataGrid","showBorders","remoteOperations","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","onInitNewRow","loadPanel","indicatorSrc","LoadingGifImage","onExporting","datagridExporter","defaultPageSize","mode","visible","useIcons","allowUpdating","allowDeleting","allowAdding","refreshMode","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","editorType","isRequired","editorOptions","height","inputAttr","style","showPageSizeSelector","allowedPageSizes","showInfo","showNavigationButtons","caption","cellRender","className","dataType","format","precision","enabled"],"mappings":"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","file":"static/js/25.aacc23e6.chunk.js","sourcesContent":["import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Editing, Export, FilterPanel, FilterRow, Form, Pager, Paging, Popup, Position, SearchPanel, Sorting } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { promotionsDataGrid } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\n\r\nconst Promotions = ({ PERMISSIONS }) => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Promotions')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={promotionsDataGrid}\r\n                    showBorders\r\n                    remoteOperations\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    onInitNewRow={(e) => e.data.type = 'One_Time'}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                    onExporting={datagridExporter}\r\n                >\r\n                    <Paging defaultPageSize={10} />\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode='popup'\r\n                        useIcons\r\n                        allowUpdating\r\n                        allowDeleting\r\n                        allowAdding\r\n                        refreshMode='reshape'\r\n                    >\r\n                        <Popup title={t('Promotion')} showTitle resizeEnabled >\r\n                            <Position my=\"middle\" at=\"middle\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item\r\n                                    dataField=\"descriptionEn\"\r\n                                    editorType=\"dxTextArea\"\r\n                                    isRequired\r\n                                    colSpan={2}\r\n                                    editorOptions={{ height: 100, inputAttr: { style: 'direction:ltr' } }} />\r\n                                <Item isRequired dataField='code' editorOptions={{ inputAttr: { style: 'direction:ltr' } }} />\r\n                                <Item dataField='discountUsd' />\r\n                                <Item dataField='discountRatio' />\r\n                                <Item dataField='useCountLimit' />\r\n                                <Item isRequired dataField='startAt' />\r\n                                <Item isRequired dataField='endAt' />\r\n                                <Item dataField='isActive' colSpan={2} />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n                    <Pager\r\n                        showPageSizeSelector\r\n                        allowedPageSizes={[10, 20, 50, 100, 500, 1000]}\r\n                        showInfo\r\n                        showNavigationButtons\r\n                    />\r\n                    <Column dataField=\"descriptionEn\" caption={t('Description')} cellRender={({ value }) => <div className='english'>{value}</div>} />\r\n                    <Column dataField=\"code\" caption={t('Code')} cellRender={({ value }) => <div className='english'>{value}</div>} />\r\n                    <Column dataField=\"discountUsd\" caption={t('Discount')} dataType=\"number\" format={{ type: \"currency\", precision: 2 }} />\r\n                    <Column dataField=\"discountRatio\" caption={t('DiscountRatio')} dataType=\"number\" format=\"#'%'\" />\r\n                    <Column dataField=\"useCountLimit\" dataType=\"number\" caption={t('Limit')} />\r\n                    <Column dataField=\"startAt\" dataType=\"date\" caption={t('StartAt')} />\r\n                    <Column dataField=\"endAt\" dataType=\"date\" caption={t('EndAt')} />\r\n\r\n                    <Column dataField=\"creatAt\" dataType=\"date\" caption={t('CreatedAt')} />\r\n                    <Column\r\n                        caption={t('Active')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isActive'\r\n                    />\r\n                    <Export enabled />\r\n                </DataGrid>\r\n            </Segment>\r\n        </Segment >\r\n    );\r\n};\r\n\r\nexport default Promotions;\r\n"],"sourceRoot":""}