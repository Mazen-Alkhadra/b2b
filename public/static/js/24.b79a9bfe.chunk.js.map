{"version":3,"sources":["helpers/datagridExporter.js","pages/admin section/services/Orders.js"],"names":["e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","t","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","dataField","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","DS","store","productsDataLookup","usersDataLookup","RequireFetchData","props","useTranslation","products","users","basic","title","dataSource","ordersDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","repaintChangesOnly","remoteOperations","allowColumnResizing","allowColumnReordering","onExporting","datagridExporter","loadPanel","indicatorSrc","LoadingGifImage","mode","visible","caption","editorOptions","wrapItemText","valueExpr","displayExpr","firstName","lastName","email","categoryNameEn","brandNameEn","nameEn","dataType"],"mappings":"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","file":"static/js/24.b79a9bfe.chunk.js","sourcesContent":["import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, FilterPanel, FilterRow, Scrolling, SearchPanel, Lookup, Sorting } from 'devextreme-react/data-grid';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { ordersDataGrid, productsDataLookup, usersDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../middlewares/HOC';\r\n\r\nconst Orders = (props) => {\r\n    const { t } = useTranslation();\r\n    const { products, users } = props;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Orders')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={ordersDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    repaintChangesOnly\r\n                    remoteOperations\r\n                    allowColumnResizing\r\n                    allowColumnReordering\r\n                    onExporting={datagridExporter}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"infinite\" />\r\n                    <SearchPanel visible />\r\n                    <Column dataField=\"name\" caption={t('Name')} />\r\n                    <Column dataField=\"creatByUserId\" caption={t('User')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={users}\r\n                            valueExpr=\"idUser\"\r\n                            displayExpr={(data) => data && `${data.firstName} ${data.lastName} / ${data.email}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"productId\" caption={t('Product')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={products}\r\n                            valueExpr=\"idProduct\"\r\n                            displayExpr={(data) => data && `${data.categoryNameEn} / ${data.brandNameEn} / ${data.nameEn}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"quantity\" caption={t('Quantity')} />\r\n                    <Column dataField=\"from\" dataType=\"datetime\" caption={t(\"From\")} />\r\n                    <Column dataField=\"to\" dataType=\"datetime\" caption={t(\"To\")} />\r\n                    <Column dataField=\"closedAt\" dataType=\"datetime\" caption={t(\"ClosedAt\")} />\r\n                    <Column dataField=\"deliveryAddress\" caption={t(\"DeliveryAddress\")} />\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst DS = [\r\n\r\n    {\r\n        store: productsDataLookup,\r\n        name: 'products'\r\n    },\r\n    {\r\n        store: usersDataLookup,\r\n        name: 'users'\r\n    }\r\n];\r\n\r\nexport default RequireFetchData(Orders, DS);\r\n"],"sourceRoot":""}