{"version":3,"sources":["pages/landing section/Auths/ForgotPassword.js","pages/landing section/Auths/Signin.js"],"names":["withTranslation","connect","forgot","error","loading","forgotInfoChanged","postForgotPassword","t","onClose","visible","useState","userName","setUserName","setError","value","props","Modal","open","size","centered","closeOnEscape","closeIcon","Header","Content","Description","Message","negative","icon","header","content","renderErrorMsg","Form","Input","fluid","type","label","placeholder","required","maxLength","iconPosition","onChange","e","toLowerCase","onFocus","autoFocus","Button","color","onClick","auth","signinInfoChanged","signin","password","setPassword","showForgotModal","setShowForgotModal","showPassword","setShowPassword","Segment","basic","Container","style","width","padding","backgroundColor","Icon","name","link","minLength","autoComplete","cursor","textAlign","as","toUpperCase"],"mappings":"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","file":"static/js/33.652b6e2b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Message, Modal } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { forgotInfoChanged, postForgotPassword } from '../../../actions';\r\n\r\nconst ForgotPassword = ({ t, onClose, visible, loading, error, forgotInfoChanged, postForgotPassword }) => {\r\n\r\n    const [userName, setUserName] = useState('');\r\n\r\n    const setError = (value) => forgotInfoChanged({ props: 'error', value });\r\n\r\n    const validate = () => {\r\n        if (!userName) {\r\n            return false;\r\n        }\r\n        setError('');\r\n        return true;\r\n    };\r\n    const onSendPressed = () => {\r\n        if (validate()) {\r\n            postForgotPassword(userName, onClose);\r\n        }\r\n    };\r\n    const renderErrorMsg = () => {\r\n        if (!error) return;\r\n        return <Message negative icon='x' header={t('Error')} content={error} />;\r\n    };\r\n\r\n    return (\r\n        <Modal open={visible} size='tiny' onClose={onClose} centered closeOnEscape closeIcon>\r\n            <Modal.Header>{t('ForgotPassword')}</Modal.Header>\r\n            <Modal.Content>\r\n                <Modal.Description>\r\n                    {renderErrorMsg()}\r\n                    <Form loading={loading}>\r\n                        <Form.Input\r\n                            fluid\r\n                            type='text'\r\n                            label={t('UserName')}\r\n                            placeholder='example123'\r\n                            required\r\n                            icon='mail'\r\n                            size='huge'\r\n                            maxLength={50}\r\n                            iconPosition='left'\r\n                            value={userName}\r\n                            onChange={(e, { value }) => setUserName(value.toLowerCase())}\r\n                            onFocus={() => setError('')}\r\n                            autoFocus\r\n                        />\r\n                        <Form.Button color='green' fluid onClick={onSendPressed}>{t('Send')}</Form.Button>\r\n                    </Form>\r\n                </Modal.Description>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ forgot }) => {\r\n    const { error, loading } = forgot;\r\n    return { error, loading };\r\n};\r\n\r\nexport default withTranslation()(connect(mapStateToProps, { forgotInfoChanged, postForgotPassword })(ForgotPassword));\r\n","import React, { useState } from 'react';\r\nimport { Segment, Container, Form, Header, Message, Icon } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { signinInfoChanged, signin } from '../../../actions';\r\nimport ForgotModal from './ForgotPassword';\r\n\r\nconst Signin = ({ t, signinInfoChanged, loading, error, signin }) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [showForgotModal, setShowForgotModal] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const onFocus = () => signinInfoChanged({ props: 'error', value: '' });\r\n\r\n    const validate = () => {\r\n        if (!userName) {\r\n            return false;\r\n        }\r\n        if (!password) {\r\n            return false;\r\n        }\r\n        // const validEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        // if (!validEmail.test(email)) {\r\n        //     return false;\r\n        // }\r\n        onFocus();\r\n        return true;\r\n    };\r\n    const onSignInPressed = () => {\r\n        if (validate()) {\r\n            signin(userName, password);\r\n        }\r\n    };\r\n    const renderErrorMsg = () => {\r\n        if (!error) return;\r\n        return <Message negative icon='x' header={t('Error')} content={error} />;\r\n    };\r\n\r\n    return (\r\n        <Segment basic>\r\n            <Container style={{ width: '50vw', padding: 20 }}>\r\n                <Segment style={{ backgroundColor: 'rgba(122, 123, 32, 0.3)' }}>\r\n                    {renderErrorMsg()}\r\n                    <Form loading={loading}>\r\n                        <Form.Input\r\n                            fluid\r\n                            type='text'\r\n                            label={t('UserName')}\r\n                            placeholder='example123'\r\n                            required\r\n                            icon='mail'\r\n                            size='huge'\r\n                            maxLength={50}\r\n                            iconPosition='left'\r\n                            value={userName}\r\n                            onChange={(e, { value }) => setUserName(value.toLowerCase())}\r\n                            onFocus={onFocus}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={t('Password')}\r\n                            placeholder='*********'\r\n                            required\r\n                            icon={<Icon name={showPassword ? 'eye' : 'eye slash'} link onClick={() => setShowPassword(!showPassword)} />}\r\n                            size='huge'\r\n                            maxLength={20}\r\n                            minLength={3}\r\n                            iconPosition='left'\r\n                            value={password}\r\n                            onChange={(e, { value }) => setPassword(value)}\r\n                            onFocus={onFocus}\r\n                            autoComplete=\"on\"\r\n                        />\r\n                        <Header style={{ cursor: 'pointer', textAlign: 'center' }} color='blue' as='h5' onClick={() => setShowForgotModal(true)}>{t('ForgotPassword')}</Header>\r\n                        <Form.Button color='green' fluid onClick={onSignInPressed}>{t('SignIn').toUpperCase()}</Form.Button>\r\n                        {/* <Header textAlign='center' as='h5'>{`---------- ${t('DontHaveAccount')} ----------`}</Header> */}\r\n                        {/* <Button type='button' color='green' fluid as={Link} to='/signup'> {t('SignUp').toUpperCase()}</Button> */}\r\n                    </Form>\r\n                </Segment>\r\n            </Container>\r\n\r\n            <ForgotModal\r\n                visible={showForgotModal}\r\n                onClose={() => setShowForgotModal(false)}\r\n            />\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => {\r\n    const { loading, error } = auth;\r\n    return { loading, error };\r\n};\r\n\r\nexport default withTranslation()(connect(mapStateToProps, { signinInfoChanged, signin })(Signin));\r\n"],"sourceRoot":""}