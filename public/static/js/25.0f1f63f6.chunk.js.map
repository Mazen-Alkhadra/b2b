{"version":3,"sources":["helpers/datagridExporter.js","res/images/wall1.jpg","res/Styles.js","pages/admin section/customers/PreferredProductsModal.js","pages/admin section/customers/Clients.js"],"names":["e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","t","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","dataField","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","Styles","wall1Image","padding","margin","withTranslation","idUser","isArabic","language","noExtraSpaces","useState","categories","setCategories","brands","setBrands","products","setProducts","preferredCategories","setPreferredCategories","categoryId","brandId","selectedPath","setSelectedPath","loading","setLoading","error","setError","handlePath","props","useEffect","getCategories","getBrands","getProducts","categoriesDataLookup","load","apps","request","get","params","prefsApps","idCategory","brandsDataLookup","productsDataLookup","Segment","basic","padded","Grid","columns","stretched","verticalAlign","divided","GridColumn","Header","as","content","Form","app","indx","isSelectedApplication","Field","style","width","Checkbox","checked","p","onChange","filter","productId","onCategoryToggle","disabled","onClick","display","justifyContent","color","cursor","nameAr","nameEn","Icon","link","b","fam","isSelectedFamily","idBrand","fa","findIndex","toRemove","includes","onBrandToggle","qul","label","q","idProduct","findQuality","temp","splice","onProductToggle","DS","store","companiesDataLookup","RequireFetchData","useTranslation","companies","gridRef","createRef","showPreferredProducts","setShowPreferredProducts","row","setRow","title","ref","dataSource","usersDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","repaintChangesOnly","remoteOperations","allowColumnResizing","allowColumnReordering","onExporting","datagridExporter","onToolbarPreparing","toolbarOptions","items","unshift","location","widget","options","icon","hint","selectedBranches","current","instance","getSelectedRowKeys","length","activate","isAccepted","usersIds","_instance","refresh","selection","allowSelectAll","mode","selectAllMode","showCheckBoxesMode","loadPanel","indicatorSrc","LoadingGifImage","visible","useIcons","allowUpdating","allowDeleting","allowAdding","refreshMode","itemType","colCount","colSpan","isRequired","editorOptions","placeholder","caption","dataType","valueExpr","displayExpr","cellRender","onShowPreferredProducts","enabled","Modal","onClose","open","closeIcon","header","size","centered","closeOnDimmerClick"],"mappings":"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","file":"static/js/25.0f1f63f6.chunk.js","sourcesContent":["import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","export default __webpack_public_path__ + \"static/media/wall1.7a23f64d.jpg\";","import wall1Image from './images/wall1.jpg';\r\n\r\nexport const Styles = {\r\n    blockquoteUp: {\r\n        position: 'absolute',\r\n        fontSize: 150,\r\n        color: '#21BA45',\r\n        fontFamily: 'Georgia',\r\n        opacity: 0.5,\r\n        left: 0,\r\n    },\r\n    blockquoteDown: {\r\n        position: 'absolute',\r\n        fontSize: 150,\r\n        right: 0,\r\n        bottom: -30,\r\n        color: '#21BA45',\r\n        fontFamily: 'Georgia',\r\n        opacity: 0.3\r\n    },\r\n    background: {\r\n        backgroundImage: `url(${wall1Image})`,\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        margin: 0,\r\n        padding: 0,\r\n        paddingTop: 50,\r\n        paddingBottom: 50\r\n    },\r\n    noExtraSpaces: {\r\n        padding: 0,\r\n        margin: 1\r\n    }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Button, Checkbox, Segment, Form, Divider, Grid, GridColumn, Header, Icon } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport i18next from 'i18next';\r\nimport { categoriesDataLookup, brandsDataLookup, productsDataLookup } from '../../../Data Stores';\r\nimport request from '../../../api';\r\nimport { ErrorSegment } from '../../../components';\r\nimport { Styles } from '../../../res';\r\n\r\nconst PreferredProductsModal = ({ idUser, t }) => {\r\n    const isArabic = i18next.language === 'ar';\r\n    const { noExtraSpaces } = Styles;\r\n    const [categories, setCategories] = useState([]);\r\n    const [brands, setBrands] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [preferredCategories, setPreferredCategories] = useState([]);\r\n    const [selectedPath, setSelectedPath] = useState({ categoryId: null, brandId: null });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [saveLoading, setSaveLoading] = useState(false);\r\n\r\n    const handlePath = ({ props, value }) => {\r\n        setSelectedPath({ ...selectedPath, brandId: null, [props]: value });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n        getBrands();\r\n        getProducts();\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    const getCategories = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { data: apps } = await categoriesDataLookup.load();\r\n            const { data: { data: prefsApps } } = await request.get(`/admin/users/cares/full`, { params: { idUser } });\r\n            setCategories(apps);\r\n            setPreferredCategories(prefsApps);\r\n            handlePath({ props: 'categoryId', value: apps[0]?.idCategory });\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const getBrands = async () => {\r\n        try {\r\n            const { data } = await brandsDataLookup.load();\r\n            setBrands(data);\r\n        } catch (err) {\r\n            setError(err);\r\n        }\r\n    };\r\n\r\n    const getProducts = async () => {\r\n        try {\r\n            const { data } = await productsDataLookup.load();\r\n            setProducts(data);\r\n        } catch (err) {\r\n            setError(err);\r\n        }\r\n\r\n    };\r\n\r\n    const resetPreferredCategories = async () => {\r\n        setSaveLoading(true);\r\n        try {\r\n            await request.post('/admin/aw/customer/preferences/reset', { idUser, categoriesIds: deleteUnnecessaryNodes() });\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setSaveLoading(false);\r\n        }\r\n    };\r\n\r\n    const onSelectAll = () => {\r\n        if (preferredCategories.length) setPreferredCategories([]);\r\n        else {\r\n            setPreferredCategories([]);\r\n            let apps = [];\r\n            for (let i = 0; i < categories.length; i++)\r\n                apps.push({ idUser, categoryId: categories[i].idCategory, brandId: null, productId: null });\r\n            setPreferredCategories(apps);\r\n        }\r\n    };\r\n\r\n    const onCategoryToggle = (app) => {\r\n        if (preferredCategories.find(p => p.categoryId === app.idCategory))\r\n            setPreferredCategories(preferredCategories.filter(p => p.categoryId !== app.idCategory));\r\n        else setPreferredCategories([...preferredCategories, { idUser, categoryId: app.idCategory, brandId: null, productId: null }]);\r\n    };\r\n\r\n    const onBrandToggle = (fam) => {\r\n        const findFamily = preferredCategories.findIndex(p => p.categoryId === selectedPath.categoryId && p.brandId === fam.idBrand);\r\n        if (findFamily !== -1) {\r\n            const toRemove = preferredCategories.filter(p => p.categoryId === selectedPath.categoryId && p.brandId === fam.idBrand);\r\n            setPreferredCategories(preferredCategories.filter(p => !toRemove.includes(p)));\r\n        }\r\n        else setPreferredCategories([...preferredCategories, { idUser, categoryId: selectedPath.categoryId, brandId: fam.idBrand, productId: null }]);\r\n    };\r\n\r\n    const onProductToggle = (qul) => {\r\n        const findQuality = preferredCategories.findIndex(p => p.categoryId === selectedPath.categoryId && p.brandId === selectedPath.brandId && p.productId === qul.idProduct);\r\n        if (findQuality !== -1) {\r\n            const temp = [...preferredCategories];\r\n            temp.splice(findQuality, 1);\r\n            setPreferredCategories(temp);\r\n        }\r\n        else setPreferredCategories([...preferredCategories, { idUser, categoryId: selectedPath.categoryId, brandId: selectedPath.brandId, productId: qul.idProduct }]);\r\n    };\r\n\r\n\r\n    const deleteUnnecessaryNodes = () => {\r\n        const data = [...preferredCategories];\r\n        const categoryParentsNodes = data.filter(p => p.categoryId && !p.brandId);\r\n\r\n        for (let i = 0; i < categoryParentsNodes.length; i++) {\r\n            const childFound = data.find(p => p.categoryId === categoryParentsNodes[i].categoryId && p.brandId);\r\n            const parIndex = data.findIndex(p => p.categoryId === categoryParentsNodes[i].categoryId && !p.brandId);\r\n            if (childFound) {\r\n                data.splice(parIndex, 1);\r\n            }\r\n        }\r\n\r\n        const familyParentsNodes = data.filter(p => p.categoryId && p.brandId && !p.productId);\r\n        for (let i = 0; i < familyParentsNodes.length; i++) {\r\n            const childFound = data.find(p => p.categoryId === familyParentsNodes[i].categoryId && p.brandId === familyParentsNodes[i].brandId && p.productId);\r\n            const parIndex = data.findIndex(p => p.categoryId === familyParentsNodes[i].categoryId && p.brandId === familyParentsNodes[i].brandId && !p.productId);\r\n            if (childFound) {\r\n                data.splice(parIndex, 1);\r\n            }\r\n        }\r\n        return data;\r\n    };\r\n\r\n    if (loading) return <Segment basic padded loading={loading} />;\r\n    if (error) return <ErrorSegment />;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <Grid columns='equal' stretched verticalAlign='top' divided>\r\n                <GridColumn>\r\n                    {/* <Checkbox\r\n                        indeterminate={categories.map(a => a.idCategory).some(ap => preferredCategories.map(a => a.categoryId).includes(ap)) && !categories.map(a => a.idCategory).every(ap => preferredCategories.map(a => a.categoryId).includes(ap))}\r\n                        checked={categories.map(a => a.idCategory).every(ap => preferredCategories.map(a => a.categoryId).includes(ap))}\r\n                        onChange={onSelectAll}\r\n                        label={t('SelectAll')}\r\n                    /> */}\r\n                    <Header as='h5' content={t(\"Categories\")} />\r\n                    <Form>\r\n                        {\r\n                            categories.map((app, indx) => {\r\n                                const isSelectedApplication = selectedPath.categoryId === app.idCategory;\r\n                                return <Form.Field key={indx} style={noExtraSpaces}>\r\n                                    <Grid columns='2' >\r\n                                        <GridColumn width='2'>\r\n                                            <Checkbox\r\n                                                checked={!!preferredCategories.find(p => p.categoryId === app.idCategory)}\r\n                                                onChange={(e, { checked }) => {\r\n                                                    onCategoryToggle(app);\r\n                                                    if (checked)\r\n                                                        handlePath({ props: \"categoryId\", value: app.idCategory });\r\n                                                }}\r\n                                                disabled\r\n                                            />\r\n                                        </GridColumn>\r\n\r\n                                        <GridColumn width='14'>\r\n                                            <div\r\n                                                onClick={() => handlePath({ props: \"categoryId\", value: app.idCategory })}\r\n                                                style={{ display: 'flex', justifyContent: 'space-between', color: isSelectedApplication ? 'blue' : 'black', cursor: \"pointer\" }}\r\n                                            >\r\n                                                <label style={{ cursor: \"pointer\" }}>{isArabic ? app.nameAr : app.nameEn}</label>\r\n                                                <Icon\r\n                                                    link\r\n                                                    name={isSelectedApplication ? 'chevron right' : 'chevron down'}\r\n                                                    color={isSelectedApplication ? 'blue' : 'black'}\r\n                                                />\r\n                                            </div>\r\n                                        </GridColumn>\r\n                                    </Grid>\r\n                                </Form.Field>;\r\n                            })\r\n                        }\r\n                    </Form>\r\n                </GridColumn>\r\n\r\n                <GridColumn>\r\n                    <Header as='h5' content={t(\"Brands\")} />\r\n                    <Form>\r\n                        {\r\n                            brands.filter(b => b.categoryId === selectedPath.categoryId).map((fam, indx) => {\r\n                                const isSelectedFamily = selectedPath.brandId === fam.idBrand;\r\n                                return <Form.Field key={indx} style={noExtraSpaces}>\r\n                                    <Grid columns='2'>\r\n                                        <GridColumn width='2'>\r\n                                            <Checkbox\r\n                                                checked={!!preferredCategories.filter(p => p.categoryId === selectedPath.categoryId).find(fa => fa.brandId === fam.idBrand)}\r\n                                                onChange={(e, { checked }) => {\r\n                                                    onBrandToggle(fam);\r\n                                                    if (checked)\r\n                                                        handlePath({ props: \"brandId\", value: fam.idBrand });\r\n                                                }}\r\n                                                // disabled={!selectedPath.categoryId || !preferredCategories.find(ap => ap.categoryId === selectedPath.categoryId)}\r\n                                                disabled\r\n                                            />\r\n                                        </GridColumn>\r\n                                        <GridColumn width='14'>\r\n                                            <div\r\n                                                onClick={() => handlePath({ props: \"brandId\", value: fam.idBrand })}\r\n                                                style={{ display: 'flex', justifyContent: 'space-between', color: isSelectedFamily ? 'blue' : 'black', cursor: \"pointer\" }}\r\n                                            >\r\n                                                <label style={{ cursor: \"pointer\" }}>{isArabic ? fam.nameAr : fam.nameEn}</label>\r\n                                                <Icon\r\n                                                    link\r\n                                                    name={isSelectedFamily ? 'chevron right' : 'chevron down'}\r\n                                                    color={isSelectedFamily ? 'blue' : 'black'}\r\n                                                />\r\n                                            </div>\r\n                                        </GridColumn>\r\n                                    </Grid>\r\n                                </Form.Field>;\r\n                            })\r\n                        }\r\n                    </Form>\r\n                </GridColumn>\r\n\r\n                <GridColumn>\r\n                    <Header as='h5' content={t(\"Products\")} />\r\n                    <Form>\r\n                        {\r\n                            products.filter(p => p.brandId === selectedPath.brandId).map((qul, indx) => <Form.Field key={indx} >\r\n                                <Checkbox\r\n                                    label={isArabic ? qul.nameAr : qul.nameEn}\r\n                                    checked={!!preferredCategories.filter(p => p.categoryId === selectedPath.categoryId && p.brandId === selectedPath.brandId).find(q => q.productId === qul.idProduct)}\r\n                                    onChange={() => onProductToggle(qul)}\r\n                                    // disabled={!selectedPath.brandId || !preferredCategories.find(p => p.categoryId === selectedPath.categoryId && p.brandId === selectedPath.brandId)}\r\n                                    disabled\r\n                                />\r\n                            </Form.Field>)\r\n                        }\r\n                    </Form>\r\n                </GridColumn>\r\n            </Grid>\r\n\r\n            {/* <Divider hidden />\r\n            <Button fluid loading={saveLoading} positive icon='save' labelPosition='left' content={t('Save')} onClick={resetPreferredCategories} /> */}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default withTranslation()(PreferredProductsModal);","import React, { useState, createRef } from 'react';\r\nimport { Icon, Modal, Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Editing, Button, FilterPanel, FilterRow, Form, Scrolling, SearchPanel, Lookup, Sorting, Export } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { usersDataGrid, companiesDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../middlewares/HOC';\r\nimport PreferredProductsModal from './PreferredProductsModal';\r\n\r\nconst Clients = (props) => {\r\n    const { t } = useTranslation();\r\n    const { companies } = props;\r\n    const gridRef = createRef();\r\n\r\n    const [showPreferredProducts, setShowPreferredProducts] = useState(false);\r\n    const [row, setRow] = useState([]);\r\n\r\n    const onShowPreferredProducts = (data) => {\r\n        setRow([data]);\r\n        setShowPreferredProducts(true);\r\n    };\r\n\r\n    const onHidePreferredProducts = () => {\r\n        setShowPreferredProducts(false);\r\n        setRow([]);\r\n    };\r\n\r\n    const onToolbarPreparing = (e) => {\r\n        e.toolbarOptions.items.unshift({\r\n            location: 'after',\r\n            widget: 'dxButton',\r\n            options: {\r\n                icon: \"unselectall\",\r\n                hint: t('RejectAll'),\r\n                onClick: async () => {\r\n                    const selectedBranches = gridRef.current.instance.getSelectedRowKeys() || [];\r\n                    if (selectedBranches.length) {\r\n                        await usersDataGrid.activate({ isAccepted: false, usersIds: selectedBranches });\r\n                        gridRef.current._instance.refresh();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        e.toolbarOptions.items.unshift({\r\n            location: 'after',\r\n            widget: 'dxButton',\r\n            options: {\r\n                icon: \"selectall\",\r\n                hint: t('AcceptAll'),\r\n                onClick: async () => {\r\n                    const selectedBranches = gridRef.current.instance.getSelectedRowKeys() || [];\r\n                    if (selectedBranches.length) {\r\n                        await usersDataGrid.activate({ isAccepted: true, usersIds: selectedBranches });\r\n                        gridRef.current._instance.refresh();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Clinets')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    ref={gridRef}\r\n                    dataSource={{\r\n                        store: usersDataGrid,\r\n                        filter: ['roleId', '=', 'NORMAL_USER']\r\n                    }}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    repaintChangesOnly\r\n                    remoteOperations\r\n                    allowColumnResizing\r\n                    allowColumnReordering\r\n                    onExporting={datagridExporter}\r\n                    onToolbarPreparing={onToolbarPreparing}\r\n                    selection={{ allowSelectAll: true, mode: 'multiple', selectAllMode: 'page', showCheckBoxesMode: 'always' }}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"infinite\" />\r\n                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode='popup'\r\n                        useIcons\r\n                        allowUpdating\r\n                        allowDeleting\r\n                        allowAdding\r\n                        refreshMode='reshape'\r\n                    >\r\n\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item dataField=\"firstName\" isRequired />\r\n                                <Item dataField=\"lastName\" isRequired />\r\n                                <Item dataField=\"email\" isRequired />\r\n                                <Item dataField=\"hasMobileWhatsapp\" />\r\n                                <Item dataField=\"mobile\" isRequired />\r\n                                <Item dataField=\"companyId\" />\r\n                                <Item dataField=\"score\" />\r\n                                <Item dataField=\"isActive\" />\r\n                                <Item dataField=\"isAccepted\" />\r\n                                <Item dataField=\"password\" colSpan={2} editorOptions={{ placeholder: 'If you fill this field the password of the client will be changed' }} />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n\r\n\r\n                    <Column dataField=\"firstName\" caption={t('FirstName')} />\r\n                    <Column dataField=\"lastName\" caption={t('LastName')} />\r\n                    <Column dataField=\"email\" caption={t('Email')} />\r\n                    <Column dataField=\"mobile\" caption={t('Mobile')} />\r\n                    <Column\r\n                        caption={t('Has WhatsApp')}\r\n                        dataType=\"boolean\"\r\n                        dataField='hasMobileWhatsapp'\r\n                        width={100}\r\n                    />\r\n                    <Column dataField=\"companyId\" caption={t('Company')}>\r\n                        <Lookup\r\n                            dataSource={companies}\r\n                            valueExpr=\"idCompany\"\r\n                            displayExpr=\"nameEn\"\r\n                        />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"lastLoginAt\" dataType='datetime' caption={t(\"Last Login\")} />\r\n                    <Column dataField=\"score\" dataType='number' caption={t('Score')} />\r\n\r\n                    <Column\r\n                        caption={t('Accepted')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isAccepted'\r\n                        width={100}\r\n                    />\r\n\r\n                    <Column\r\n                        caption={t('Active')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isActive'\r\n                        width={100}\r\n                    />\r\n\r\n                    <Column type=\"buttons\" caption={t('Actions')}>\r\n                        <Button name=\"edit\" />\r\n                        <Button name=\"delete\" />\r\n                    </Column>\r\n\r\n                    <Column type=\"buttons\" caption={t('PreferredProducts')} cellRender={({ data }) =>\r\n                        <div>\r\n                            <Icon name='list'\r\n                                link\r\n                                color='blue'\r\n                                onClick={() => onShowPreferredProducts(data)}\r\n                            />\r\n                        </div>\r\n                    } />\r\n                    <Export enabled />\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n\r\n            <Modal\r\n                onClose={onHidePreferredProducts}\r\n                open={showPreferredProducts}\r\n                content={row[0] && <PreferredProductsModal idUser={row[0].idUser} />}\r\n                closeIcon\r\n                header={t('PreferredProducts')}\r\n                size='large'\r\n                centered\r\n                closeOnDimmerClick={false}\r\n            />\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst DS = [\r\n\r\n    {\r\n        store: companiesDataLookup,\r\n        name: 'companies'\r\n\r\n    }\r\n];\r\n\r\nexport default RequireFetchData(Clients, DS);\r\n"],"sourceRoot":""}