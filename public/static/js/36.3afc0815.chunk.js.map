{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticGroup.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticLabel.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticValue.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/Statistic.js","pages/admin section/reports/Stats.js"],"names":["StatisticGroup","props","children","className","color","content","horizontal","inverted","items","size","widths","classes","cx","useKeyOnly","useWidthProp","rest","getUnhandledProps","ElementType","getElementType","childrenUtils","isNil","React","createElement","_extends","_map","item","Statistic","create","handledProps","propTypes","StatisticLabel","createShorthandFactory","StatisticValue","text","floated","label","value","useValueAndKey","defaultProps","autoGenerateKey","Group","Label","Value","Stats","t","useTranslation","useState","error","setError","loading","setLoading","data","setData","useEffect","getStats","request","get","Segment","basic","title","Grid","stackable","textAlign","columns","stretched","celled","GridRow","GridColumn","Header","as","bestProductPrice","name","price","mostBuyCompany","type","totalQuantity","mostOrderCompany","mostOrderProduct"],"mappings":"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","file":"static/js/36.3afc0815.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Statistic from './Statistic';\n/**\n * A group of statistics.\n */\n\nfunction StatisticGroup(props) {\n  var children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      items = props.items,\n      size = props.size,\n      widths = props.widths;\n  var classes = cx('ui', color, size, useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useWidthProp(widths), 'statistics', className);\n  var rest = getUnhandledProps(StatisticGroup, props);\n  var ElementType = getElementType(StatisticGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(items, function (item) {\n    return Statistic.create(item);\n  }));\n}\n\nStatisticGroup.handledProps = [\"as\", \"children\", \"className\", \"color\", \"content\", \"horizontal\", \"inverted\", \"items\", \"size\", \"widths\"];\nStatisticGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A statistic group can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A statistic group can present its measurement horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** A statistic group can be formatted to fit on a dark background. */\n  inverted: PropTypes.bool,\n\n  /** Array of props for Statistic. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A statistic group can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'big', 'massive', 'medium')),\n\n  /** A statistic group can have its items divided evenly. */\n  widths: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default StatisticGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A statistic can contain a label to help provide context for the presented value.\n */\n\nfunction StatisticLabel(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('label', className);\n  var rest = getUnhandledProps(StatisticLabel, props);\n  var ElementType = getElementType(StatisticLabel, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticLabel.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nStatisticLabel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nStatisticLabel.create = createShorthandFactory(StatisticLabel, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticLabel;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A statistic can contain a numeric, icon, image, or text value.\n */\n\nfunction StatisticValue(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      text = props.text;\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticValue.handledProps = [\"as\", \"children\", \"className\", \"content\", \"text\"];\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticValue;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useValueAndKey } from '../../lib';\nimport StatisticGroup from './StatisticGroup';\nimport StatisticLabel from './StatisticLabel';\nimport StatisticValue from './StatisticValue';\n/**\n * A statistic emphasizes the current value of an attribute.\n */\n\nfunction Statistic(props) {\n  var children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      floated = props.floated,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      label = props.label,\n      size = props.size,\n      text = props.text,\n      value = props.value;\n  var classes = cx('ui', color, size, useValueAndKey(floated, 'floated'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), 'statistic', className);\n  var rest = getUnhandledProps(Statistic, props);\n  var ElementType = getElementType(Statistic, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), StatisticValue.create(value, {\n    defaultProps: {\n      text: text\n    },\n    autoGenerateKey: false\n  }), StatisticLabel.create(label, {\n    autoGenerateKey: false\n  }));\n}\n\nStatistic.handledProps = [\"as\", \"children\", \"className\", \"color\", \"content\", \"floated\", \"horizontal\", \"inverted\", \"label\", \"size\", \"text\", \"value\"];\nStatistic.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A statistic can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A statistic can sit to the left or right of other content. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A statistic can present its measurement horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** A statistic can be formatted to fit on a dark background. */\n  inverted: PropTypes.bool,\n\n  /** Label content of the Statistic. */\n  label: customPropTypes.contentShorthand,\n\n  /** A statistic can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'big', 'massive', 'medium')),\n\n  /** Format the StatisticValue with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool,\n\n  /** Value content of the Statistic. */\n  value: customPropTypes.contentShorthand\n} : {};\nStatistic.Group = StatisticGroup;\nStatistic.Label = StatisticLabel;\nStatistic.Value = StatisticValue;\nStatistic.create = createShorthandFactory(Statistic, function (content) {\n  return {\n    content: content\n  };\n});\nexport default Statistic;","import React, { useState, useEffect } from \"react\";\r\nimport { Segment, Grid, GridColumn, GridRow, Statistic, Header } from 'semantic-ui-react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ErrorSegment, PageHeader, Spinner } from '../../../components';\r\nimport request from '../../../api';\r\n\r\nconst Stats = () => {\r\n    const { t } = useTranslation();\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getStats();\r\n    }, []);\r\n\r\n    const getStats = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const { data } = await request.get('/admin/stats/full');\r\n            setData(data);\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (loading) return <Spinner />;\r\n    if (error) return <ErrorSegment />;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Statistics')} />\r\n            <Segment basic>\r\n                <Grid stackable textAlign='center' columns='equal' stretched celled>\r\n                    <GridRow>\r\n                        <GridColumn>\r\n                            <Header as='h3' color='blue' content=\"Best Product Price\" />\r\n                            <Statistic.Group widths='2' size='small' color='violet'>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.bestProductPrice?.name}</Statistic.Value>\r\n                                    <Statistic.Label>Product</Statistic.Label>\r\n                                </Statistic>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.bestProductPrice?.price}</Statistic.Value>\r\n                                    <Statistic.Label>Price</Statistic.Label>\r\n                                </Statistic>\r\n                            </Statistic.Group>\r\n                        </GridColumn>\r\n\r\n                        <GridColumn>\r\n                            <Header as='h3' color='blue' content=\"Most Buy Company\" />\r\n                            <Statistic.Group widths='3' size='small' color='violet'>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostBuyCompany?.name}</Statistic.Value>\r\n                                    <Statistic.Label>Company</Statistic.Label>\r\n                                </Statistic>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostBuyCompany?.type}</Statistic.Value>\r\n                                    <Statistic.Label>Type</Statistic.Label>\r\n                                </Statistic>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostBuyCompany?.totalQuantity}</Statistic.Value>\r\n                                    <Statistic.Label>Offers</Statistic.Label>\r\n                                </Statistic>\r\n                            </Statistic.Group>\r\n                        </GridColumn>\r\n                    </GridRow>\r\n\r\n                    <GridRow>\r\n                        <GridColumn>\r\n                            <Header as='h3' color='blue' content=\"Most Order Company\" />\r\n                            <Statistic.Group widths='3' size='small' color='violet'>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostOrderCompany?.name}</Statistic.Value>\r\n                                    <Statistic.Label>Company</Statistic.Label>\r\n                                </Statistic>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostOrderCompany?.type}</Statistic.Value>\r\n                                    <Statistic.Label>Type</Statistic.Label>\r\n                                </Statistic>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostOrderCompany?.totalQuantity}</Statistic.Value>\r\n                                    <Statistic.Label>Orders</Statistic.Label>\r\n                                </Statistic>\r\n                            </Statistic.Group>\r\n                        </GridColumn>\r\n\r\n                        <GridColumn>\r\n                            <Header as='h3' color='blue' content=\"Most Order Product\" />\r\n                            <Statistic.Group widths='2' size='small' color='violet'>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostOrderProduct?.name}</Statistic.Value>\r\n                                    <Statistic.Label>Product</Statistic.Label>\r\n                                </Statistic>\r\n                                <Statistic>\r\n                                    <Statistic.Value>{data?.mostOrderProduct?.totalQuantity}</Statistic.Value>\r\n                                    <Statistic.Label>Total Quantity</Statistic.Label>\r\n                                </Statistic>\r\n                            </Statistic.Group>\r\n                        </GridColumn>\r\n                    </GridRow>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Stats;"],"sourceRoot":""}