{"version":3,"sources":["pages/admin section/reports/Payments.js","helpers/datagridExporter.js"],"names":["Payments","props","t","useTranslation","PERMISSIONS","basic","title","dataSource","paymentsDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","repaintChangesOnly","remoteOperations","allowColumnResizing","allowColumnReordering","onExporting","datagridExporter","loadPanel","indicatorSrc","LoadingGifImage","mode","visible","dataField","caption","dataType","column","summaryType","displayFormat","valueFormat","precision","enabled","EXPORT","e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel"],"mappings":"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","file":"static/js/29.067923c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Export, FilterPanel, FilterRow, Scrolling, SearchPanel, Sorting, Summary, TotalItem } from 'devextreme-react/data-grid';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { paymentsDataGrid } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\n\r\nconst Payments = (props) => {\r\n    const { t } = useTranslation();\r\n    const { PERMISSIONS } = props;\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Payments')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={paymentsDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    repaintChangesOnly\r\n                    remoteOperations\r\n                    allowColumnResizing\r\n                    allowColumnReordering\r\n                    onExporting={datagridExporter}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"infinite\" />\r\n                    <SearchPanel visible />\r\n\r\n                    <Column dataField=\"userFullName\" caption={t(\"Name\")} />\r\n                    <Column dataField=\"email\" caption={t(\"Email\")} />\r\n                    <Column dataField=\"mobile\" caption={t(\"Mobile\")} />\r\n                    <Column dataField=\"amountUsd\" dataType=\"number\" caption={t(\"Amount\")} />\r\n                    <Column dataField=\"type\" caption={t(\"Type\")} />\r\n\r\n                    <Column dataField=\"completeAt\" dataType='datetime' caption={t(\"CompletedAt\")} />\r\n                    <Column dataField=\"status\" caption={t(\"Status\")} />\r\n\r\n                    <Summary>\r\n                        <TotalItem\r\n                            column=\"amountUsd\"\r\n                            summaryType=\"sum\"\r\n                            displayFormat={`${t('Total')}: {0}`}\r\n                            valueFormat={{ precision: 2 }}\r\n                        />\r\n                    </Summary>\r\n                    <Export enabled={PERMISSIONS.EXPORT} />\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n        </Segment>\r\n    );\r\n};\r\n\r\n\r\nexport default Payments;\r\n","import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};"],"sourceRoot":""}