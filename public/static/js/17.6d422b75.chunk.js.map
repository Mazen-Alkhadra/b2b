{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/elements/Container/Container.js","../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageContent.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageItem.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageList.js","../node_modules/semantic-ui-react/dist/es/collections/Message/Message.js","pages/landing section/Auths/Activation.js"],"names":["Container","props","children","className","content","fluid","text","textAlign","classes","cx","useKeyOnly","useTextAlignProp","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","Divider","clearing","fitted","hidden","horizontal","inverted","section","vertical","MessageContent","MessageHeader","create","createShorthandFactory","val","MessageItem","defaultProps","as","MessageList","items","_map","Message","_Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","handleDismiss","e","onDismiss","_inheritsLoose","prototype","render","_this$props","attached","color","compact","error","floating","header","icon","info","list","negative","positive","size","success","visible","warning","useKeyOrValueAndKey","dismissIcon","Icon","name","onClick","autoGenerateKey","_isNil","createHTMLParagraph","Component","Content","Header","List","Item","withTranslation","connect","activation","loading","activationInfoChanged","postActivationCode","reSendActivationCode","t","useState","userName","setUserName","code","setCode","showResend","setShowResend","onFocus","value","onActivatePressed","onResendPressed","basic","style","width","padding","backgroundColor","renderErrorMsg","Input","type","label","placeholder","required","maxLength","minLength","iconPosition","onChange","autoComplete","Button","toUpperCase","renderPostActivationForm","toLowerCase","renderResendForm","checked"],"mappings":"6FAAA,mEASA,SAASA,EAAUC,GACjB,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBC,EAAUH,EAAMG,QAChBC,EAAQJ,EAAMI,MACdC,EAAOL,EAAMK,KACbC,EAAYN,EAAMM,UAClBC,EAAUC,YAAG,KAAMC,YAAWJ,EAAM,QAASI,YAAWL,EAAO,SAAUM,YAAiBJ,GAAY,YAAaJ,GACnHS,EAAOC,YAAkBb,EAAWC,GACpCa,EAAcC,YAAef,EAAWC,GAC5C,OAAoBe,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTW,IAAcC,MAAMlB,GAAYE,EAAUF,GAGhDF,EAAUqB,aAAe,CAAC,KAAM,WAAY,YAAa,UAAW,QAAS,OAAQ,aACrFrB,EAAUsB,UAqBN,GACWtB,O,iCC/Cf,mEASA,SAASuB,EAAQtB,GACf,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBqB,EAAWvB,EAAMuB,SACjBpB,EAAUH,EAAMG,QAChBqB,EAASxB,EAAMwB,OACfC,EAASzB,EAAMyB,OACfC,EAAa1B,EAAM0B,WACnBC,EAAW3B,EAAM2B,SACjBC,EAAU5B,EAAM4B,QAChBC,EAAW7B,EAAM6B,SACjBtB,EAAUC,YAAG,KAAMC,YAAWc,EAAU,YAAad,YAAWe,EAAQ,UAAWf,YAAWgB,EAAQ,UAAWhB,YAAWiB,EAAY,cAAejB,YAAWkB,EAAU,YAAalB,YAAWmB,EAAS,WAAYnB,YAAWoB,EAAU,YAAa,UAAW3B,GACtQS,EAAOC,YAAkBU,EAAStB,GAClCa,EAAcC,YAAeQ,EAAStB,GAC1C,OAAoBe,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTW,IAAcC,MAAMlB,GAAYE,EAAUF,GAGhDqB,EAAQF,aAAe,CAAC,KAAM,WAAY,YAAa,WAAY,UAAW,SAAU,SAAU,aAAc,WAAY,UAAW,YACvIE,EAAQD,UAiCJ,GACWC,O,wKCtDf,SAASQ,EAAe9B,GACtB,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBC,EAAUH,EAAMG,QAChBI,EAAUC,YAAG,UAAWN,GACxBS,EAAOC,YAAkBkB,EAAgB9B,GACzCa,EAAcC,YAAegB,EAAgB9B,GACjD,OAAoBe,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTW,IAAcC,MAAMlB,GAAYE,EAAUF,GAGhD6B,EAAeV,aAAe,CAAC,KAAM,WAAY,YAAa,WAC9DU,EAAeT,UAYX,GACWS,QC1Bf,SAASC,EAAc/B,GACrB,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBC,EAAUH,EAAMG,QAChBI,EAAUC,YAAG,SAAUN,GACvBS,EAAOC,YAAkBmB,EAAe/B,GACxCa,EAAcC,YAAeiB,EAAe/B,GAChD,OAAoBe,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTW,IAAcC,MAAMlB,GAAYE,EAAUF,GAGhD8B,EAAcX,aAAe,CAAC,KAAM,WAAY,YAAa,WAC7DW,EAAcV,UAYV,GACJU,EAAcC,OAASC,YAAuBF,GAAe,SAAUG,GACrE,MAAO,CACL/B,QAAS+B,MAGEH,Q,QC/Bf,SAASI,EAAYnC,GACnB,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBC,EAAUH,EAAMG,QAChBI,EAAUC,YAAG,UAAWN,GACxBS,EAAOC,YAAkBuB,EAAanC,GACtCa,EAAcC,YAAeqB,EAAanC,GAC9C,OAAoBe,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTW,IAAcC,MAAMlB,GAAYE,EAAUF,GAGhDkC,EAAYf,aAAe,CAAC,KAAM,WAAY,YAAa,WAC3De,EAAYd,UAYR,GACJc,EAAYC,aAAe,CACzBC,GAAI,MAENF,EAAYH,OAASC,YAAuBE,GAAa,SAAUhC,GACjE,MAAO,CACLA,QAASA,MAGEgC,QChCf,SAASG,EAAYtC,GACnB,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBqC,EAAQvC,EAAMuC,MACdhC,EAAUC,YAAG,OAAQN,GACrBS,EAAOC,YAAkB0B,EAAatC,GACtCa,EAAcC,YAAewB,EAAatC,GAC9C,OAAoBe,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTW,IAAcC,MAAMlB,GAAYuC,YAAKD,EAAOJ,EAAYH,QAAU/B,GAGxEqC,EAAYlB,aAAe,CAAC,KAAM,WAAY,YAAa,SAC3DkB,EAAYjB,UAYR,GACJiB,EAAYF,aAAe,CACzBC,GAAI,MAENC,EAAYN,OAASC,YAAuBK,GAAa,SAAUJ,GACjE,MAAO,CACLK,MAAOL,MAGII,QC3BXG,EAAuB,SAAUC,GAGnC,SAASD,IAGP,IAFA,IAAIE,EAEKC,EAAOC,UAAUC,OAAQC,EAAO,IAAIC,MAAMJ,GAAOK,EAAO,EAAGA,EAAOL,EAAMK,IAC/EF,EAAKE,GAAQJ,UAAUI,GAUzB,OAPAN,EAAQD,EAAWQ,KAAKC,MAAMT,EAAY,CAACU,MAAMC,OAAON,KAAUK,MAE5DE,cAAgB,SAAUC,GAC9B,IAAIC,EAAYb,EAAM3C,MAAMwD,UACxBA,GAAWA,EAAUD,EAAGZ,EAAM3C,QAG7B2C,EAsDT,OAtEAc,YAAehB,EAASC,GAmBXD,EAAQiB,UAEdC,OAAS,WACd,IAAIC,EAAcR,KAAKpD,MACnB6D,EAAWD,EAAYC,SACvB5D,EAAW2D,EAAY3D,SACvBC,EAAY0D,EAAY1D,UACxB4D,EAAQF,EAAYE,MACpBC,EAAUH,EAAYG,QACtB5D,EAAUyD,EAAYzD,QACtB6D,EAAQJ,EAAYI,MACpBC,EAAWL,EAAYK,SACvBC,EAASN,EAAYM,OACrBzC,EAASmC,EAAYnC,OACrB0C,EAAOP,EAAYO,KACnBC,EAAOR,EAAYQ,KACnBC,EAAOT,EAAYS,KACnBC,EAAWV,EAAYU,SACvBd,EAAYI,EAAYJ,UACxBe,EAAWX,EAAYW,SACvBC,EAAOZ,EAAYY,KACnBC,EAAUb,EAAYa,QACtBC,EAAUd,EAAYc,QACtBC,EAAUf,EAAYe,QACtBpE,EAAUC,YAAG,KAAMsD,EAAOU,EAAM/D,YAAWsD,EAAS,WAAYtD,YAAWuD,EAAO,SAAUvD,YAAWwD,EAAU,YAAaxD,YAAWgB,EAAQ,UAAWhB,YAAW0D,EAAM,QAAS1D,YAAW2D,EAAM,QAAS3D,YAAW6D,EAAU,YAAa7D,YAAW8D,EAAU,YAAa9D,YAAWgE,EAAS,WAAYhE,YAAWiE,EAAS,WAAYjE,YAAWkE,EAAS,WAAYC,YAAoBf,EAAU,YAAa,UAAW3D,GAC1a2E,EAAcrB,GAA0BzC,IAAMC,cAAc8D,IAAM,CACpEC,KAAM,QACNC,QAAS5B,KAAKE,gBAEZ3C,EAAOC,YAAkB6B,EAASW,KAAKpD,OACvCa,EAAcC,YAAe2B,EAASW,KAAKpD,OAE/C,OAAKkB,IAAcC,MAAMlB,GAMLc,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTsE,EAAaC,IAAK9C,OAAOmC,EAAM,CACjCc,iBAAiB,MACbC,YAAOhB,KAAYgB,YAAO/E,KAAa+E,YAAOb,KAAuBtD,IAAMC,cAAcc,EAAgB,KAAMC,EAAcC,OAAOkC,EAAQ,CAChJe,iBAAiB,IACf3C,EAAYN,OAAOqC,EAAM,CAC3BY,iBAAiB,IACfE,YAAoBhF,EAAS,CAC/B8E,iBAAiB,MAdGlE,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtET,UAAWK,IACTsE,EAAa5E,IAgBdwC,EAvEkB,CAwEzB2C,aAEF3C,EAAQrB,aAAe,CAAC,KAAM,WAAY,WAAY,YAAa,QAAS,UAAW,UAAW,QAAS,WAAY,SAAU,SAAU,OAAQ,OAAQ,OAAQ,WAAY,YAAa,WAAY,OAAQ,UAAW,UAAW,WAEtOqB,EAAQpB,UAqEJ,GACJoB,EAAQ4C,QAAUvD,EAClBW,EAAQ6C,OAASvD,EACjBU,EAAQ8C,KAAOjD,EACfG,EAAQ+C,KAAOrD,G,kJCxDAsD,wBAAkBC,aALT,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAEvB,MAAO,CAAEC,QADkBD,EAAnBC,QACU5B,MADS2B,EAAV3B,SAIqC,CAAE6B,0BAAuBC,uBAAoBC,0BAAtEL,EAxGd,SAAC,GAA4F,IAA1FM,EAAyF,EAAzFA,EAAGH,EAAsF,EAAtFA,sBAAuBD,EAA+D,EAA/DA,QAAS5B,EAAsD,EAAtDA,MAAO8B,EAA+C,EAA/CA,mBAAoBC,EAA2B,EAA3BA,qBAChF,EAAgCE,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAAU,kBAAMX,EAAsB,CAAE7F,MAAO,QAASyG,MAAO,MAgB/DC,EAAoB,WAbjBN,IAGLI,IACO,IAWHV,EAAmBM,IAGrBO,EAAkB,WAXfT,IAGLM,IACO,IASHT,EAAqBG,EAAUK,IAqDvC,OACI,cAAC,IAAD,CAASK,OAAK,EAAd,SACI,cAAC,IAAD,CAAWC,MAAO,CAAEC,MAAO,OAAQC,QAAS,IAA5C,SACI,eAAC,IAAD,CAASF,MAAO,CAAEG,gBAAiB,2BAAnC,UArDW,WACnB,GAAKhD,EACL,OAAO,cAAC,IAAD,CAASM,UAAQ,EAACH,KAAK,IAAID,OAAQ8B,EAAE,SAAU7F,QAAS6D,IAoDlDiD,GAjDgB,WAC7B,IAAKX,EAAY,OACb,eAAC,IAAD,CAAMV,QAASA,EAAf,UACI,cAAC,IAAKsB,MAAN,CACI9G,OAAK,EACL+G,KAAK,WACLC,MAAOpB,EAAE,kBACTqB,YAAY,YACZC,UAAQ,EACRnD,KAAK,OACLK,KAAK,OACL+C,UAAW,GACXC,UAAW,EACXC,aAAa,OACbhB,MAAOL,EACPsB,SAAU,SAACnE,EAAD,OAAMkD,EAAN,EAAMA,MAAN,OAAkBJ,EAAQI,IACpCD,QAASA,EACTmB,aAAa,OAEjB,cAAC,IAAKC,OAAN,CAAa9D,MAAM,QAAQ1D,OAAK,EAAC4E,QAAS0B,EAA1C,SAA8DV,EAAE,YAAY6B,mBA+BvEC,GA1BQ,WACrB,GAAIxB,EAAY,OACZ,eAAC,IAAD,CAAMV,QAASA,EAAf,UACI,cAAC,IAAKsB,MAAN,CACI9G,OAAK,EACL+G,KAAK,OACLC,MAAOpB,EAAE,YACTqB,YAAY,aACZC,UAAQ,EACRnD,KAAK,OACLK,KAAK,OACL+C,UAAW,GACXE,aAAa,OACbhB,MAAOP,EACPwB,SAAU,SAACnE,EAAD,OAAMkD,EAAN,EAAMA,MAAN,OAAkBN,EAAYM,EAAMsB,gBAC9CvB,QAASA,IAEb,eAAC,IAAKoB,OAAN,CAAa9D,MAAM,QAAQ1D,OAAK,EAAC4E,QAAS2B,EAA1C,cAA6DX,EAAE,aAAa6B,oBAUvEG,GACD,cAAC,IAAD,IACA,cAAC,IAAD,CAAUZ,MAAOpB,EAAE,gBAAiBiC,QAAS3B,EAAYoB,SAAU,SAACnE,EAAD,GAAqB,IAAf0E,EAAc,EAAdA,QACrEzB,IACAD,EAAc0B","file":"static/js/17.6d422b75.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n/**\n * A container limits content to a maximum width.\n */\n\nfunction Container(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      text = props.text,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nContainer.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"text\", \"textAlign\"];\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a content.\n */\n\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default MessageContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a header.\n */\n\nfunction MessageHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('header', className);\n  var rest = getUnhandledProps(MessageHeader, props);\n  var ElementType = getElementType(MessageHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageHeader.create = createShorthandFactory(MessageHeader, function (val) {\n  return {\n    content: val\n  };\n});\nexport default MessageHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message list can contain an item.\n */\n\nfunction MessageItem(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageItem, props);\n  var ElementType = getElementType(MessageItem, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageItem.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageItem.defaultProps = {\n  as: 'li'\n};\nMessageItem.create = createShorthandFactory(MessageItem, function (content) {\n  return {\n    content: content\n  };\n});\nexport default MessageItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport MessageItem from './MessageItem';\n/**\n * A message can contain a list of items.\n */\n\nfunction MessageList(props) {\n  var children = props.children,\n      className = props.className,\n      items = props.items;\n  var classes = cx('list', className);\n  var rest = getUnhandledProps(MessageList, props);\n  var ElementType = getElementType(MessageList, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? _map(items, MessageItem.create) : children);\n}\n\nMessageList.handledProps = [\"as\", \"children\", \"className\", \"items\"];\nMessageList.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand Message.Items. */\n  items: customPropTypes.collectionShorthand\n} : {};\nMessageList.defaultProps = {\n  as: 'ul'\n};\nMessageList.create = createShorthandFactory(MessageList, function (val) {\n  return {\n    items: val\n  };\n});\nexport default MessageList;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _without from \"lodash-es/without\";\nimport _isNil from \"lodash-es/isNil\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createHTMLParagraph, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\nimport Icon from '../../elements/Icon';\nimport MessageContent from './MessageContent';\nimport MessageHeader from './MessageHeader';\nimport MessageList from './MessageList';\nimport MessageItem from './MessageItem';\n/**\n * A message displays information that explains nearby content.\n * @see Form\n */\n\nvar Message = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Message, _Component);\n\n  function Message() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleDismiss = function (e) {\n      var onDismiss = _this.props.onDismiss;\n      if (onDismiss) onDismiss(e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = Message.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        attached = _this$props.attached,\n        children = _this$props.children,\n        className = _this$props.className,\n        color = _this$props.color,\n        compact = _this$props.compact,\n        content = _this$props.content,\n        error = _this$props.error,\n        floating = _this$props.floating,\n        header = _this$props.header,\n        hidden = _this$props.hidden,\n        icon = _this$props.icon,\n        info = _this$props.info,\n        list = _this$props.list,\n        negative = _this$props.negative,\n        onDismiss = _this$props.onDismiss,\n        positive = _this$props.positive,\n        size = _this$props.size,\n        success = _this$props.success,\n        visible = _this$props.visible,\n        warning = _this$props.warning;\n    var classes = cx('ui', color, size, useKeyOnly(compact, 'compact'), useKeyOnly(error, 'error'), useKeyOnly(floating, 'floating'), useKeyOnly(hidden, 'hidden'), useKeyOnly(icon, 'icon'), useKeyOnly(info, 'info'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(success, 'success'), useKeyOnly(visible, 'visible'), useKeyOnly(warning, 'warning'), useKeyOrValueAndKey(attached, 'attached'), 'message', className);\n    var dismissIcon = onDismiss && /*#__PURE__*/React.createElement(Icon, {\n      name: \"close\",\n      onClick: this.handleDismiss\n    });\n    var rest = getUnhandledProps(Message, this.props);\n    var ElementType = getElementType(Message, this.props);\n\n    if (!childrenUtils.isNil(children)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), dismissIcon, children);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), dismissIcon, Icon.create(icon, {\n      autoGenerateKey: false\n    }), (!_isNil(header) || !_isNil(content) || !_isNil(list)) && /*#__PURE__*/React.createElement(MessageContent, null, MessageHeader.create(header, {\n      autoGenerateKey: false\n    }), MessageList.create(list, {\n      autoGenerateKey: false\n    }), createHTMLParagraph(content, {\n      autoGenerateKey: false\n    })));\n  };\n\n  return Message;\n}(Component);\n\nMessage.handledProps = [\"as\", \"attached\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"error\", \"floating\", \"header\", \"hidden\", \"icon\", \"info\", \"list\", \"negative\", \"onDismiss\", \"positive\", \"size\", \"success\", \"visible\", \"warning\"];\nexport { Message as default };\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A message can be formatted to attach itself to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['bottom', 'top'])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A message can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A message can only take up the width of its content. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `negative`. */\n  error: PropTypes.bool,\n\n  /** A message can float above content that it is related to. */\n  floating: PropTypes.bool,\n\n  /** Shorthand for MessageHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** A message can be hidden. */\n  hidden: PropTypes.bool,\n\n  /** A message can contain an icon. */\n  icon: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.bool]),\n\n  /** A message may be formatted to display information. */\n  info: PropTypes.bool,\n\n  /** Array shorthand items for the MessageList. Mutually exclusive with children. */\n  list: customPropTypes.collectionShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `error`. */\n  negative: PropTypes.bool,\n\n  /**\n   * A message that the user can choose to hide.\n   * Called when the user clicks the \"x\" icon. This also adds the \"x\" icon.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onDismiss: PropTypes.func,\n\n  /** A message may be formatted to display a positive message.  Same as `success`. */\n  positive: PropTypes.bool,\n\n  /** A message can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A message may be formatted to display a positive message.  Same as `positive`. */\n  success: PropTypes.bool,\n\n  /** A message can be set to visible to force itself to be shown. */\n  visible: PropTypes.bool,\n\n  /** A message may be formatted to display warning messages. */\n  warning: PropTypes.bool\n} : {};\nMessage.Content = MessageContent;\nMessage.Header = MessageHeader;\nMessage.List = MessageList;\nMessage.Item = MessageItem;","import React, { useState } from 'react';\r\nimport { Segment, Container, Form, Message, Checkbox, Divider } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { activationInfoChanged, postActivationCode, reSendActivationCode } from '../../../actions';\r\n\r\n\r\nconst Activation = ({ t, activationInfoChanged, loading, error, postActivationCode, reSendActivationCode }) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [code, setCode] = useState('');\r\n    const [showResend, setShowResend] = useState(false);\r\n\r\n    const onFocus = () => activationInfoChanged({ props: 'error', value: '' });\r\n\r\n    const validatePostActivation = () => {\r\n        if (!code) {\r\n            return false;\r\n        }\r\n        onFocus();\r\n        return true;\r\n    };\r\n    const validateResendActivation = () => {\r\n        if (!userName) {\r\n            return false;\r\n        }\r\n        onFocus();\r\n        return true;\r\n    };\r\n    const onActivatePressed = () => {\r\n        if (validatePostActivation()) {\r\n            postActivationCode(code);\r\n        }\r\n    };\r\n    const onResendPressed = () => {\r\n        if (validateResendActivation()) {\r\n            reSendActivationCode(userName, setShowResend);\r\n        }\r\n    };\r\n    const renderErrorMsg = () => {\r\n        if (!error) return;\r\n        return <Message negative icon='x' header={t('Error')} content={error} />;\r\n    };\r\n\r\n    const renderPostActivationForm = () => {\r\n        if (!showResend) return (\r\n            <Form loading={loading}>\r\n                <Form.Input\r\n                    fluid\r\n                    type='password'\r\n                    label={t('ActivationCode')}\r\n                    placeholder='*********'\r\n                    required\r\n                    icon='lock'\r\n                    size='huge'\r\n                    maxLength={20}\r\n                    minLength={3}\r\n                    iconPosition='left'\r\n                    value={code}\r\n                    onChange={(e, { value }) => setCode(value)}\r\n                    onFocus={onFocus}\r\n                    autoComplete=\"on\"\r\n                />\r\n                <Form.Button color='green' fluid onClick={onActivatePressed}>{t('Activate').toUpperCase()}</Form.Button>\r\n            </Form>\r\n        );\r\n    };\r\n\r\n    const renderResendForm = () => {\r\n        if (showResend) return (\r\n            <Form loading={loading}>\r\n                <Form.Input\r\n                    fluid\r\n                    type='text'\r\n                    label={t('UserName')}\r\n                    placeholder='example123'\r\n                    required\r\n                    icon='mail'\r\n                    size='huge'\r\n                    maxLength={50}\r\n                    iconPosition='left'\r\n                    value={userName}\r\n                    onChange={(e, { value }) => setUserName(value.toLowerCase())}\r\n                    onFocus={onFocus}\r\n                />\r\n                <Form.Button color='green' fluid onClick={onResendPressed}> {t('SendAgain').toUpperCase()}</Form.Button >\r\n            </Form>\r\n        );\r\n    };\r\n    return (\r\n        <Segment basic >\r\n            <Container style={{ width: '50vw', padding: 20 }}>\r\n                <Segment style={{ backgroundColor: 'rgba(122, 123, 32, 0.3)' }}>\r\n                    {renderErrorMsg()}\r\n                    {renderPostActivationForm()}\r\n                    {renderResendForm()}\r\n                    <Divider />\r\n                    <Checkbox label={t('DidntReceive')} checked={showResend} onChange={(e, { checked }) => {\r\n                        onFocus();\r\n                        setShowResend(checked);\r\n                    }} />\r\n                </Segment>\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ activation }) => {\r\n    const { loading, error } = activation;\r\n    return { loading, error };\r\n};\r\n\r\nexport default withTranslation()(connect(mapStateToProps, { activationInfoChanged, postActivationCode, reSendActivationCode })(Activation));\r\n"],"sourceRoot":""}