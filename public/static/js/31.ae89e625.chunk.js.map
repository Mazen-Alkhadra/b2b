{"version":3,"sources":["pages/admin section/services/Offers.js","helpers/datagridExporter.js"],"names":["DS","store","ordersDataLookup","name","productsDataLookup","usersDataLookup","offerStatusDataLookup","citiesDataLookup","RequireFetchData","props","t","useTranslation","PERMISSIONS","orders","users","products","offerStatus","cities","basic","title","dataSource","offersDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","repaintChangesOnly","remoteOperations","allowColumnResizing","allowColumnReordering","onExporting","datagridExporter","loadPanel","indicatorSrc","LoadingGifImage","mode","visible","useIcons","allowAdding","ADD","allowUpdating","UPDATE","allowDeleting","DELETE","refreshMode","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","isRequired","dataField","editorType","editorOptions","height","inputAttr","style","caption","wrapItemText","paginate","pageSize","valueExpr","displayExpr","data","firstName","lastName","email","categoryNameEn","brandNameEn","nameEn","dataType","format","width","enabled","EXPORT","e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","value","map","v","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel"],"mappings":"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","file":"static/js/31.ae89e625.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, FilterPanel, FilterRow, Form, Popup, Position, Scrolling, SearchPanel, Lookup, Sorting, Export, Editing } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { offersDataGrid, offerStatusDataLookup, ordersDataLookup, productsDataLookup, usersDataLookup, citiesDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../middlewares/HOC';\r\n\r\nconst Offers = (props) => {\r\n    const { t } = useTranslation();\r\n    const { PERMISSIONS, orders, users, products, offerStatus, cities } = props;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Offers')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={offersDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    repaintChangesOnly\r\n                    remoteOperations\r\n                    allowColumnResizing\r\n                    allowColumnReordering\r\n                    onExporting={datagridExporter}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"infinite\" />\r\n                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode=\"popup\"\r\n                        useIcons\r\n                        allowAdding={PERMISSIONS.ADD}\r\n                        allowUpdating={PERMISSIONS.UPDATE}\r\n                        allowDeleting={PERMISSIONS.DELETE}\r\n                        refreshMode='reshape'\r\n                    >\r\n                        <Popup title={t('Offer')} showTitle resizeEnabled >\r\n                            <Position my=\"middle\" at=\"middle\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item isRequired dataField='tenderId' />\r\n                                <Item isRequired dataField='quantity' />\r\n                                <Item isRequired dataField='priceUSD' />\r\n                                <Item dataField='tax' />\r\n                                <Item dataField='bIncludeDelivery' />\r\n                                <Item dataField='deliveryCost' />\r\n                                <Item\r\n                                    dataField=\"deliveryAddress\"\r\n                                    editorType=\"dxTextArea\"\r\n                                    colSpan={2}\r\n                                    editorOptions={{ height: 100, inputAttr: { style: 'direction:ltr' } }} />\r\n                                <Item dataField='cityId' />\r\n                                <Item isRequired dataField='status' />\r\n                                <Item dataField='acceptedAt' />\r\n                                <Item dataField='excutedAt' />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n                    <Column dataField=\"tenderId\" caption={t('Order')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={{\r\n                                store: orders,\r\n                                paginate: true,\r\n                                pageSize: 50,\r\n                            }}\r\n                            valueExpr=\"idTender\"\r\n                            displayExpr='name'\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"tenderCreatorByUserId\" caption={t('OrderCreator')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={users}\r\n                            valueExpr=\"idUser\"\r\n                            displayExpr={(data) => data && `${data.firstName} ${data.lastName} / ${data.email}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"creatByUserId\" caption={t('OfferCreator')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={users}\r\n                            valueExpr=\"idUser\"\r\n                            displayExpr={(data) => data && `${data.firstName} ${data.lastName} / ${data.email}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"productId\" caption={t('Product')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={products}\r\n                            valueExpr=\"idProduct\"\r\n                            displayExpr={(data) => data && `${data.categoryNameEn} / ${data.brandNameEn} / ${data.nameEn}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"tenderQuantity\" caption={t('Order Quantity')} />\r\n                    <Column dataField=\"quantity\" caption={t('Offer Quantity')} />\r\n                    <Column dataField=\"priceUSD\" dataType='number' caption={t(\"Price\")} />\r\n                    <Column dataField=\"tax\" dataType='number' caption={t(\"Tax/Vat\")} format=\"#%\" />\r\n                    <Column dataField=\"creatAt\" dataType=\"datetime\" caption={t(\"CreatedAt\")} />\r\n                    <Column dataField=\"acceptedAt\" dataType=\"datetime\" caption={t(\"AcceptedAt\")} />\r\n                    <Column dataField=\"excutedAt\" dataType=\"datetime\" caption={t(\"ExcutedAt\")} />\r\n                    <Column\r\n                        caption={t('IncludeDelivery')}\r\n                        dataType=\"boolean\"\r\n                        dataField='bIncludeDelivery'\r\n                        width={100}\r\n                    />\r\n                    <Column dataField=\"cityId\" caption={t('City')} >\r\n                        <Lookup\r\n                            dataSource={{\r\n                                store: cities,\r\n                                paginate: true,\r\n                                pageSize: 50,\r\n                            }}\r\n                            valueExpr=\"idCity\"\r\n                            displayExpr=\"nameEn\"\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"deliveryAddress\" caption={t(\"DeliveryAddress\")} />\r\n                    <Column dataField=\"deliveryCost\" dataType='number' caption={t(\"DeliveryCost\")} />\r\n                    <Column dataField=\"status\" caption={t(\"Status\")} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={offerStatus}\r\n                            valueExpr='type'\r\n                            displayExpr='value'\r\n                        />\r\n                    </Column>\r\n                    <Export enabled={PERMISSIONS.EXPORT} />\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst DS = [\r\n\r\n    {\r\n        store: ordersDataLookup,\r\n        name: 'orders'\r\n    },\r\n    {\r\n        store: productsDataLookup,\r\n        name: 'products'\r\n    },\r\n    {\r\n        store: usersDataLookup,\r\n        name: 'users'\r\n    },\r\n    {\r\n        store: offerStatusDataLookup,\r\n        name: 'offerStatus'\r\n    },\r\n    {\r\n        store: citiesDataLookup,\r\n        name: 'cities'\r\n    }\r\n];\r\n\r\nexport default RequireFetchData(Offers, DS);\r\n","import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};"],"sourceRoot":""}