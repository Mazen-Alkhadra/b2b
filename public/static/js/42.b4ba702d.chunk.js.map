{"version":3,"sources":["pages/landing section/Auths/ForgotPassword.js","pages/landing section/Auths/Signin.js"],"names":["withTranslation","connect","forgot","error","loading","forgotInfoChanged","postForgotPassword","t","onClose","visible","useState","email","setEmail","setError","value","props","Modal","open","size","centered","closeOnEscape","closeIcon","Header","Content","Description","Message","negative","icon","header","content","renderErrorMsg","Form","Input","fluid","type","label","placeholder","required","maxLength","iconPosition","onChange","e","toLowerCase","onFocus","autoFocus","Button","color","onClick","auth","signinInfoChanged","signin","userName","setUserName","password","setPassword","showForgotModal","setShowForgotModal","showPassword","setShowPassword","Segment","basic","Container","style","width","padding","backgroundColor","Icon","name","link","minLength","autoComplete","cursor","textAlign","as","toUpperCase"],"mappings":"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","file":"static/js/42.b4ba702d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Message, Modal } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { forgotInfoChanged, postForgotPassword } from '../../../actions';\r\n\r\nconst ForgotPassword = ({ t, onClose, visible, loading, error, forgotInfoChanged, postForgotPassword }) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n\r\n    const setError = (value) => forgotInfoChanged({ props: 'error', value });\r\n\r\n    const validate = () => {\r\n        if (!email) {\r\n            return false;\r\n        }\r\n        setError('');\r\n        return true;\r\n    };\r\n    const onSendPressed = () => {\r\n        if (validate()) {\r\n            postForgotPassword(email, onClose);\r\n        }\r\n    };\r\n    const renderErrorMsg = () => {\r\n        if (!error) return;\r\n        return <Message negative icon='x' header={t('Error')} content={error} />;\r\n    };\r\n\r\n    return (\r\n        <Modal open={visible} size='tiny' onClose={onClose} centered closeOnEscape closeIcon>\r\n            <Modal.Header>{t('ForgotPassword')}</Modal.Header>\r\n            <Modal.Content>\r\n                <Modal.Description>\r\n                    {renderErrorMsg()}\r\n                    <Form loading={loading}>\r\n                        <Form.Input\r\n                            fluid\r\n                            type='email'\r\n                            label={t('Email')}\r\n                            placeholder='ex@ex.com'\r\n                            required\r\n                            icon='mail'\r\n                            size='huge'\r\n                            maxLength={50}\r\n                            iconPosition='left'\r\n                            value={email}\r\n                            onChange={(e, { value }) => setEmail(value.toLowerCase())}\r\n                            onFocus={() => setError('')}\r\n                            autoFocus\r\n                        />\r\n                        <Form.Button color='green' fluid onClick={onSendPressed}>{t('Send')}</Form.Button>\r\n                    </Form>\r\n                </Modal.Description>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ forgot }) => {\r\n    const { error, loading } = forgot;\r\n    return { error, loading };\r\n};\r\n\r\nexport default withTranslation()(connect(mapStateToProps, { forgotInfoChanged, postForgotPassword })(ForgotPassword));\r\n","import React, { useState } from 'react';\r\nimport { Segment, Container, Form, Header, Message, Icon } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { signinInfoChanged, signin } from '../../../actions';\r\nimport ForgotModal from './ForgotPassword';\r\n\r\nconst Signin = ({ t, signinInfoChanged, loading, error, signin }) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [showForgotModal, setShowForgotModal] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const onFocus = () => signinInfoChanged({ props: 'error', value: '' });\r\n\r\n    const validate = () => {\r\n        if (!userName) {\r\n            return false;\r\n        }\r\n        if (!password) {\r\n            return false;\r\n        }\r\n        // const validEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        // if (!validEmail.test(email)) {\r\n        //     return false;\r\n        // }\r\n        onFocus();\r\n        return true;\r\n    };\r\n    const onSignInPressed = () => {\r\n        if (validate()) {\r\n            signin(userName, password);\r\n        }\r\n    };\r\n    const renderErrorMsg = () => {\r\n        if (!error) return;\r\n        return <Message negative icon='x' header={t('Error')} content={error} />;\r\n    };\r\n\r\n    return (\r\n        <Segment basic>\r\n            <Container style={{ width: '50vw', padding: 20 }}>\r\n                <Segment style={{ backgroundColor: 'rgba(122, 123, 32, 0.3)' }}>\r\n                    {renderErrorMsg()}\r\n                    <Form loading={loading}>\r\n                        <Form.Input\r\n                            fluid\r\n                            type='text'\r\n                            label={t('UserName')}\r\n                            placeholder='example123'\r\n                            required\r\n                            icon='mail'\r\n                            size='huge'\r\n                            maxLength={50}\r\n                            iconPosition='left'\r\n                            value={userName}\r\n                            onChange={(e, { value }) => setUserName(value.toLowerCase())}\r\n                            onFocus={onFocus}\r\n                        />\r\n                        <Form.Input\r\n                            fluid\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            label={t('Password')}\r\n                            placeholder='*********'\r\n                            required\r\n                            icon={<Icon name={showPassword ? 'eye' : 'eye slash'} link onClick={() => setShowPassword(!showPassword)} />}\r\n                            size='huge'\r\n                            maxLength={20}\r\n                            minLength={3}\r\n                            iconPosition='left'\r\n                            value={password}\r\n                            onChange={(e, { value }) => setPassword(value)}\r\n                            onFocus={onFocus}\r\n                            autoComplete=\"on\"\r\n                        />\r\n                        <Header style={{ cursor: 'pointer', textAlign: 'center' }} color='blue' as='h5' onClick={() => setShowForgotModal(true)}>{t('ForgotPassword')}</Header>\r\n                        <Form.Button color='green' fluid onClick={onSignInPressed}>{t('SignIn').toUpperCase()}</Form.Button>\r\n                        {/* <Header textAlign='center' as='h5'>{`---------- ${t('DontHaveAccount')} ----------`}</Header> */}\r\n                        {/* <Button type='button' color='green' fluid as={Link} to='/signup'> {t('SignUp').toUpperCase()}</Button> */}\r\n                    </Form>\r\n                </Segment>\r\n            </Container>\r\n\r\n            <ForgotModal\r\n                visible={showForgotModal}\r\n                onClose={() => setShowForgotModal(false)}\r\n            />\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => {\r\n    const { loading, error } = auth;\r\n    return { loading, error };\r\n};\r\n\r\nexport default withTranslation()(connect(mapStateToProps, { signinInfoChanged, signin })(Signin));\r\n"],"sourceRoot":""}