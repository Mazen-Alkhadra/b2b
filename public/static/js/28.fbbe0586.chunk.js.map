{"version":3,"sources":["helpers/datagridExporter.js","pages/admin section/services/Orders.js"],"names":["e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","t","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","dataField","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","DS","store","productsDataLookup","usersDataLookup","orderStatusDataLookup","citiesDataLookup","RequireFetchData","props","useTranslation","products","users","orderStatus","cities","basic","title","dataSource","ordersDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","repaintChangesOnly","remoteOperations","allowColumnResizing","allowColumnReordering","onExporting","datagridExporter","loadPanel","indicatorSrc","LoadingGifImage","mode","visible","useIcons","allowAdding","allowUpdating","allowDeleting","refreshMode","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","isRequired","caption","editorOptions","wrapItemText","valueExpr","displayExpr","firstName","lastName","email","paginate","pageSize","categoryNameEn","brandNameEn","nameEn","dataType","enabled"],"mappings":"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","file":"static/js/28.fbbe0586.chunk.js","sourcesContent":["import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, FilterPanel, FilterRow, Scrolling, Editing, Form, Popup, Position, SearchPanel, Lookup, Sorting, Export } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { citiesDataLookup, ordersDataGrid, orderStatusDataLookup, productsDataLookup, usersDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../middlewares/HOC';\r\n\r\nconst Orders = (props) => {\r\n    const { t } = useTranslation();\r\n    const { products, users, orderStatus, cities } = props;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Orders')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={ordersDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    repaintChangesOnly\r\n                    remoteOperations\r\n                    allowColumnResizing\r\n                    allowColumnReordering\r\n                    onExporting={datagridExporter}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"infinite\" />\r\n                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode=\"popup\"\r\n                        useIcons\r\n                        allowAdding\r\n                        allowUpdating\r\n                        allowDeleting\r\n                        refreshMode='reshape'\r\n                    >\r\n                        <Popup title={t('Order')} showTitle resizeEnabled >\r\n                            <Position my=\"middle\" at=\"middle\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item isRequired dataField='name' />\r\n                                <Item isRequired dataField='productId' />\r\n                                <Item isRequired dataField='quantity' />\r\n                                <Item isRequired dataField='from' />\r\n                                <Item isRequired dataField='to' />\r\n                                <Item dataField='deliverBefore' />\r\n\r\n                                <Item isRequired dataField='status' />\r\n                                <Item dataField='closedAt' />\r\n                                <Item dataField=\"cityId\" isRequired />\r\n                                <Item dataField=\"area\" />\r\n                                <Item dataField=\"street\" />\r\n                                <Item dataField=\"buildingNumber\" />\r\n                                <Item dataField='addressLongitude' />\r\n                                <Item dataField='addressLatitude' />\r\n                                <Item dataField='moreAddressInfo' />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n                    <Column dataField=\"name\" caption={t('Name')} />\r\n                    <Column dataField=\"creatByUserId\" caption={t('User')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={users}\r\n                            valueExpr=\"idUser\"\r\n                            displayExpr={(data) => data && `${data.firstName} ${data.lastName} / ${data.email}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"productId\" caption={t('Product')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={{\r\n                                store: products,\r\n                                paginate: true,\r\n                                pageSize: 50,\r\n                            }}\r\n                            valueExpr=\"idProduct\"\r\n                            displayExpr={(data) => data && `${data.categoryNameEn} / ${data.brandNameEn} / ${data.nameEn}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"quantity\" caption={t('Quantity')} />\r\n                    <Column dataField=\"from\" dataType=\"datetime\" caption={t(\"From\")} />\r\n                    <Column dataField=\"to\" dataType=\"datetime\" caption={t(\"To\")} />\r\n                    <Column dataField=\"closedAt\" dataType=\"datetime\" caption={t(\"ClosedAt\")} />\r\n                    <Column dataField=\"deliverBefore\" dataType=\"datetime\" caption={t(\"Deliver Before\")} />\r\n                    <Column dataField=\"status\" caption={t(\"Status\")} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={orderStatus}\r\n                            valueExpr='type'\r\n                            displayExpr='value'\r\n                        />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"cityId\" caption={t('City')} >\r\n                        <Lookup\r\n                            dataSource={{\r\n                                store: cities,\r\n                                paginate: true,\r\n                                pageSize: 50,\r\n                            }}\r\n                            valueExpr=\"idCity\"\r\n                            displayExpr=\"nameEn\"\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"area\" caption={t('Area')} />\r\n                    <Column dataField=\"street\" caption={t('Street')} />\r\n                    <Column dataField=\"buildingNumber\" caption={t('BuildingNumber')} />\r\n                    <Column dataField=\"addressLongitude\" caption={t('Longitude')} />\r\n                    <Column dataField=\"addressLatitude\" caption={t('Latitude')} />\r\n                    <Column dataField=\"moreAddressInfo\" caption={t('Notes')} />\r\n\r\n                    <Export enabled />\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst DS = [\r\n\r\n    {\r\n        store: productsDataLookup,\r\n        name: 'products'\r\n    },\r\n    {\r\n        store: usersDataLookup,\r\n        name: 'users'\r\n    },\r\n    {\r\n        store: orderStatusDataLookup,\r\n        name: 'orderStatus'\r\n    },\r\n    {\r\n        store: citiesDataLookup,\r\n        name: 'cities'\r\n    }\r\n];\r\n\r\nexport default RequireFetchData(Orders, DS);\r\n"],"sourceRoot":""}