{"version":3,"sources":["helpers/datagridExporter.js","pages/admin section/packages/Subscriptions.js"],"names":["e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","t","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","dataField","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","withTranslation","lookUpEditCellRender","PERMISSIONS","cell","searchExpr","valueExpr","displayExpr","searchEnabled","searchMode","defaultValue","lookup","disabled","row","isNewRow","onValueChanged","setValue","basic","title","dataSource","subscriptionsDataGrid","showBorders","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","remoteOperations","repaintChangesOnly","loadPanel","indicatorSrc","LoadingGifImage","onExporting","datagridExporter","grouping","defaultPageSize","showPageSizeSelector","allowedPageSizes","showInfo","showNavigationButtons","mode","autoExpandAll","visible","useIcons","allowAdding","allowUpdating","allowDeleting","refreshMode","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","isRequired","groupIndex","caption","editCellRender","firstName","lastName","email","store","usersDataLookup","filter","nameEn","isActive","packagesDataLookup","format","precision","code","discountUsd","promotionsDataLookup","dataType"],"mappings":"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","file":"static/js/21.5fb8daeb.chunk.js","sourcesContent":["import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Editing, FilterPanel, Popup, FilterRow, Form, Grouping, Lookup, Position, Pager, Paging, RemoteOperations, RequiredRule, SearchPanel, Sorting } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport { SelectBox } from 'devextreme-react/ui/select-box';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { subscriptionsDataGrid, usersDataLookup, packagesDataLookup, promotionsDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\n\r\nconst Subscriptions = ({ t, PERMISSIONS }) => {\r\n\r\n    const lookUpEditCellRender = (cell, searchExpr, valueExpr, displayExpr) => {\r\n        return <SelectBox\r\n            searchEnabled\r\n            searchExpr={searchExpr}\r\n            searchMode='contains'\r\n            defaultValue={cell.value}\r\n            {...cell.column.lookup}\r\n            disabled={!cell.row.isNewRow}\r\n            valueExpr={valueExpr}\r\n            displayExpr={displayExpr}\r\n            onValueChanged={({ value }) => cell.setValue(value)}\r\n        />;\r\n    };\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Subscriptions')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={subscriptionsDataGrid}\r\n                    showBorders\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    remoteOperations\r\n                    repaintChangesOnly\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                    onExporting={datagridExporter}\r\n                >\r\n                    <RemoteOperations grouping />\r\n                    <Paging defaultPageSize={10} />\r\n                    <Pager\r\n                        showPageSizeSelector\r\n                        allowedPageSizes={[10, 20, 50, 100, 500, 1000]}\r\n                        showInfo\r\n                        showNavigationButtons\r\n                    />\r\n                    <Sorting mode='multiple' />\r\n                    <Grouping autoExpandAll={false} />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <SearchPanel visible />\r\n\r\n                    <Editing\r\n                        mode='popup'\r\n                        useIcons\r\n                        allowAdding\r\n                        allowUpdating\r\n                        allowDeleting\r\n                        refreshMode='reshape'\r\n                    >\r\n                        <Popup title={t('Subscription')} showTitle resizeEnabled >\r\n                            <Position my=\"middle\" at=\"middle\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item isRequired dataField='userId' colSpan={2} />\r\n                                <Item isRequired dataField='subscriptionPackageId' colSpan={2} />\r\n                                <Item dataField='promotionId' colSpan={2} />\r\n                                <Item dataField='isActive' />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n\r\n                    <Column dataField=\"userId\" groupIndex={0} caption={t('User')} editCellRender={(cell) => lookUpEditCellRender(cell, 'email', 'idUser', (data) => (data && `${data.firstName} ${data.lastName} [${data.email}]`))}>\r\n                        <Lookup\r\n                            dataSource={{ store: usersDataLookup, filter: [\"isAdmin\", '=', false] }}\r\n                            displayExpr={(data) => (data && `${data.firstName} ${data.lastName} [${data.email}]`)}\r\n                            valueExpr=\"idUser\"\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"subscriptionPackageId\" caption={t('Package')} editCellRender={(cell) => lookUpEditCellRender(cell, 'nameEn', 'idSubscriptionPackage', (data) => (data && `${data.nameEn} / ${t('Active')} [${data.isActive ? t('YES') : t('NO')}]`))}>\r\n                        <Lookup\r\n                            dataSource={packagesDataLookup}\r\n                            displayExpr=\"nameEn\"\r\n                            valueExpr=\"idSubscriptionPackage\"\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"actualCostUsd\" caption={t('Price')} format={{ type: \"currency\", precision: 2 }} />\r\n                    <Column dataField=\"promotionId\" caption={t('Promotion')} editCellRender={(cell) => lookUpEditCellRender(cell, 'code', 'idPromotion', (data) => (data && `ID [ ${data.code} ] | ${t('Discount')}: [ ${data.discountUsd} $ ]`))}>\r\n                        <Lookup\r\n                            dataSource={promotionsDataLookup}\r\n                            displayExpr={(data) => (data && `ID [ ${data.code} ]`)}\r\n                            valueExpr='idPromotion'\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"subscribAt\" dataType=\"date\" caption={t('StartAt')} />\r\n                    <Column dataField=\"expirAt\" dataType=\"date\" caption={t('EndAt')} />\r\n                    {/* <Column dataField='paymentStatus' caption={t('Status')} /> */}\r\n                    <Column\r\n                        caption={t('Active')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isActive'\r\n                    />\r\n                    <Column\r\n                        caption={t('Valid')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isValid'\r\n                    />\r\n                </DataGrid>\r\n            </Segment>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default withTranslation()(Subscriptions);"],"sourceRoot":""}