{"version":3,"sources":["pages/admin section/settings/About.js"],"names":["About","props","t","useTranslation","useState","error","setError","btnLoading","setBtnLoading","loading","setLoading","PERMISSIONS","useForm","defaultValues","companyInfoEn","viewEn","targetEn","otherInfoEn","idAboutus","isActive","control","handleSubmit","setValue","useEffect","getData","request","get","data","aboutData","onSaveClick","post","basic","title","name","render","field","TextArea","label","ref","onChange","UPDATE","ADD","fluid","content","primary","onClick","errors","console","log"],"mappings":"kNA8HeA,UAtHD,SAACC,GACX,IAAQC,EAAMC,cAAND,EACR,EAA0BE,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KACtB,EAAoCF,oBAAS,GAAM,mBAA5CG,EAAU,KAAEC,EAAa,KAChC,EAA8BJ,oBAAS,GAAM,mBAAtCK,EAAO,KAAEC,EAAU,KAClBC,EAAgBV,EAAhBU,YACR,EAA4CC,YAAQ,CAChDC,cAAe,CACXC,cAAe,GACfC,OAAQ,GACRC,SAAU,GACVC,YAAa,GACbC,UAAW,KACXC,UAAU,KAPVC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAcC,EAAQ,EAARA,SAY/BC,qBAAU,WACNC,GAEJ,GAAG,IAEH,IAIMA,EAAO,iDAAG,kGAES,OAFT,SAERd,GAAW,GAAM,SACgBe,IAAQC,IAAI,uBAAuB,KAAD,WAAnDC,EAAI,EAAZA,KAAQA,MACVC,EAAYD,EAAK,MAEnBL,EAAS,gBAAiBM,EAAUd,eACpCQ,EAAS,SAAUM,EAAUb,QAC7BO,EAAS,WAAYM,EAAUZ,UAC/BM,EAAS,cAAeM,EAAUX,aAClCK,EAAS,YAAaM,EAAUV,YACnC,kDAEDZ,EAAS,EAAD,IAAM,QAEI,OAFJ,UAEdI,GAAW,GAAO,6EAEzB,kBAjBY,mCAkBPmB,EAAW,iDAAG,WAAOF,GAAI,2EAEH,OAFG,SAEvBnB,GAAc,GAAM,SACdiB,IAAQK,KAAK,wBAAyBH,GAAM,KAAD,iDAEjDrB,EAAS,EAAD,IAAM,OAEO,OAFP,SAEdE,GAAc,GAAO,0EAE5B,gBATgB,sCAWjB,OAAIC,EAAgB,cAAC,IAAO,IACxBJ,EAAc,cAAC,IAAY,IAE3B,eAAC,IAAO,CAAC0B,OAAK,YACV,cAAC,IAAU,CAACC,MAAO9B,EAAE,aACrB,cAAC,IAAO,CAAC6B,OAAK,WACV,eAAC,IAAI,WACD,cAAC,IAAU,CACPE,KAAK,gBACLb,QAASA,EACTc,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAAC,IAAKC,SAAQ,yBACVC,MAAOnC,EAAE,UACLiC,GAAK,IACTG,IAAK,KACLC,SAAUJ,EAAMI,WAClB,IAGV,cAAC,IAAU,CACPN,KAAK,SACLb,QAASA,EACTc,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAAC,IAAKC,SAAQ,yBACVC,MAAOnC,EAAE,WACLiC,GAAK,IACTG,IAAK,KACLC,SAAUJ,EAAMI,WAClB,IAGV,cAAC,IAAU,CACPN,KAAK,WACLb,QAASA,EACTc,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAAC,IAAKC,SAAQ,yBACVC,MAAOnC,EAAE,WACLiC,GAAK,IACTG,IAAK,KACLC,SAAUJ,EAAMI,WAClB,IAGV,cAAC,IAAU,CACPN,KAAK,cACLb,QAASA,EACTc,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACZ,cAAC,IAAKC,SAAQ,yBACVC,MAAOnC,EAAE,UACLiC,GAAK,IACTG,IAAK,KACLC,SAAUJ,EAAMI,WAClB,KAGR5B,EAAY6B,QAAU7B,EAAY8B,MAAQ,cAAE,IAAM,CAACC,OAAK,EAACjC,QAASF,EAAYoC,QAASzC,EAAE,QAAS0C,SAAO,EAACC,QAASxB,GAxFpH,SAACM,GAAI,OAAKE,EAAYF,EAAM,IAC7B,SAACmB,GAAM,OAAKC,QAAQC,IAAIF,EAAQ,aA4FpD,C","file":"static/js/37.5a64764d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Form, Segment } from 'semantic-ui-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\nimport request from '../../../api';\r\nimport { ErrorSegment, PageHeader, Spinner } from '../../../components';\r\n\r\nconst About = (props) => {\r\n    const { t } = useTranslation();\r\n    const [error, setError] = useState('');\r\n    const [btnLoading, setBtnLoading] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const { PERMISSIONS } = props;\r\n    const { control, handleSubmit, setValue } = useForm({\r\n        defaultValues: {\r\n            companyInfoEn: '',\r\n            viewEn: '',\r\n            targetEn: '',\r\n            otherInfoEn: '',\r\n            idAboutus: null,\r\n            isActive: true\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getData();\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    const onSubmit = (data) => onSaveClick(data);\r\n    const onError = (errors) => console.log(errors);\r\n\r\n\r\n    const getData = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const { data: { data } } = await request.get('/admin/aboutus/full');\r\n            const aboutData = data[0];\r\n            if (aboutData) {\r\n                setValue('companyInfoEn', aboutData.companyInfoEn);\r\n                setValue('viewEn', aboutData.viewEn);\r\n                setValue('targetEn', aboutData.targetEn);\r\n                setValue('otherInfoEn', aboutData.otherInfoEn);\r\n                setValue('idAboutus', aboutData.idAboutus);\r\n            }\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    const onSaveClick = async (data) => {\r\n        try {\r\n            setBtnLoading(true);\r\n            await request.post('/admin/aboutus/update', data);\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setBtnLoading(false);\r\n        }\r\n    };\r\n\r\n    if (loading) return <Spinner />;\r\n    if (error) return <ErrorSegment />;\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('AboutUs')} />\r\n            <Segment basic>\r\n                <Form>\r\n                    <Controller\r\n                        name='companyInfoEn'\r\n                        control={control}\r\n                        render={({ field }) => (\r\n                            <Form.TextArea\r\n                                label={t('About')}\r\n                                {...field}\r\n                                ref={null}\r\n                                onChange={field.onChange}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <Controller\r\n                        name='viewEn'\r\n                        control={control}\r\n                        render={({ field }) => (\r\n                            <Form.TextArea\r\n                                label={t('Vision')}\r\n                                {...field}\r\n                                ref={null}\r\n                                onChange={field.onChange}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <Controller\r\n                        name='targetEn'\r\n                        control={control}\r\n                        render={({ field }) => (\r\n                            <Form.TextArea\r\n                                label={t('Target')}\r\n                                {...field}\r\n                                ref={null}\r\n                                onChange={field.onChange}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <Controller\r\n                        name='otherInfoEn'\r\n                        control={control}\r\n                        render={({ field }) => (\r\n                            <Form.TextArea\r\n                                label={t('Other')}\r\n                                {...field}\r\n                                ref={null}\r\n                                onChange={field.onChange}\r\n                            />\r\n                        )}\r\n                    />\r\n                    {(PERMISSIONS.UPDATE || PERMISSIONS.ADD) && < Button fluid loading={btnLoading} content={t(\"Save\")} primary onClick={handleSubmit(onSubmit, onError)} />}\r\n                </Form>\r\n            </Segment>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default About;"],"sourceRoot":""}