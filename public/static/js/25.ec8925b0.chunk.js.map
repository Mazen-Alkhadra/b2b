{"version":3,"sources":["pages/admin section/packages/Promotions.js","helpers/datagridExporter.js"],"names":["Promotions","PERMISSIONS","t","useTranslation","basic","title","dataSource","promotionsDataGrid","showBorders","remoteOperations","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","onInitNewRow","e","data","type","loadPanel","indicatorSrc","LoadingGifImage","onExporting","datagridExporter","defaultPageSize","mode","visible","useIcons","allowUpdating","UPDATE","allowDeleting","DELETE","allowAdding","ADD","refreshMode","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","dataField","editorType","isRequired","editorOptions","height","inputAttr","style","showPageSizeSelector","allowedPageSizes","showInfo","showNavigationButtons","caption","cellRender","value","className","dataType","format","precision","enabled","EXPORT","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","name","map","v","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel"],"mappings":"8FAAA,gHA0FeA,UA/EI,SAAH,GAAyB,IAAnBC,EAAW,EAAXA,YACVC,EAAMC,cAAND,EAER,OACI,eAAC,IAAO,CAACE,OAAK,YACV,cAAC,IAAU,CAACC,MAAOH,EAAE,gBACrB,cAAC,IAAO,CAACE,OAAK,WACV,eAAC,IAAQ,CACLE,WAAYC,IACZC,aAAW,EACXC,kBAAgB,EAChBC,qBAAmB,EACnBC,iBAAe,EACfC,iBAAe,EACfC,aAAc,SAACC,GAAC,OAAKA,EAAEC,KAAKC,KAAO,UAAU,EAC7CC,UAAW,CAAEC,aAAcC,KAC3BC,YAAaC,IAAiB,UAE9B,cAAC,SAAM,CAACC,gBAAiB,KACzB,cAAC,UAAO,CAACC,KAAK,aACd,cAAC,YAAS,CAACC,SAAO,IAClB,cAAC,cAAW,CAACA,SAAO,IACpB,cAAC,cAAW,CAACA,SAAO,IACpB,eAAC,UAAO,CACJD,KAAK,QACLE,UAAQ,EACRC,cAAezB,EAAY0B,OAC3BC,cAAe3B,EAAY4B,OAC3BC,YAAa7B,EAAY8B,IACzBC,YAAY,UAAS,UAErB,cAAC,QAAK,CAAC3B,MAAOH,EAAE,aAAc+B,WAAS,EAACC,eAAa,WACjD,cAAC,WAAQ,CAACC,GAAG,SAASC,GAAG,SAASC,GAAIC,WAE1C,cAAC,OAAI,UACD,eAAC,OAAI,CAACC,SAAS,QAAQC,SAAU,EAAGC,QAAS,EAAE,UAC3C,cAAC,OAAI,CACDC,UAAU,gBACVC,WAAW,aACXC,YAAU,EACVH,QAAS,EACTI,cAAe,CAAEC,OAAQ,IAAKC,UAAW,CAAEC,MAAO,oBACtD,cAAC,OAAI,CAACJ,YAAU,EAACF,UAAU,OAAOG,cAAe,CAAEE,UAAW,CAAEC,MAAO,oBACvE,cAAC,OAAI,CAACN,UAAU,gBAChB,cAAC,OAAI,CAACA,UAAU,kBAChB,cAAC,OAAI,CAACA,UAAU,kBAChB,cAAC,OAAI,CAACE,YAAU,EAACF,UAAU,YAC3B,cAAC,OAAI,CAACE,YAAU,EAACF,UAAU,UAC3B,cAAC,OAAI,CAACA,UAAU,WAAWD,QAAS,YAIhD,cAAC,QAAK,CACFQ,sBAAoB,EACpBC,iBAAkB,CAAC,GAAI,GAAI,GAAI,IAAK,IAAK,KACzCC,UAAQ,EACRC,uBAAqB,IAEzB,cAAC,SAAM,CAACV,UAAU,gBAAgBW,QAASnD,EAAE,eAAgBoD,WAAY,gBAAGC,EAAK,EAALA,MAAK,OAAO,qBAAKC,UAAU,UAAS,SAAED,GAAY,IAC9H,cAAC,SAAM,CAACb,UAAU,OAAOW,QAASnD,EAAE,QAASoD,WAAY,gBAAGC,EAAK,EAALA,MAAK,OAAO,qBAAKC,UAAU,UAAS,SAAED,GAAY,IAC9G,cAAC,SAAM,CAACb,UAAU,cAAcW,QAASnD,EAAE,YAAauD,SAAS,SAASC,OAAQ,CAAE1C,KAAM,WAAY2C,UAAW,KACjH,cAAC,SAAM,CAACjB,UAAU,gBAAgBW,QAASnD,EAAE,iBAAkBuD,SAAS,SAASC,OAAO,OACxF,cAAC,SAAM,CAAChB,UAAU,gBAAgBe,SAAS,SAASJ,QAASnD,EAAE,WAC/D,cAAC,SAAM,CAACwC,UAAU,UAAUe,SAAS,OAAOJ,QAASnD,EAAE,aACvD,cAAC,SAAM,CAACwC,UAAU,QAAQe,SAAS,OAAOJ,QAASnD,EAAE,WAErD,cAAC,SAAM,CAACwC,UAAU,UAAUe,SAAS,OAAOJ,QAASnD,EAAE,eACvD,cAAC,SAAM,CACHmD,QAASnD,EAAE,UACXuD,SAAS,UACTf,UAAU,aAEd,cAAC,SAAM,CAACkB,QAAS3D,EAAY4D,gBAKjD,C,mCCxFA,kEAMe,aAAC/C,GAA6C,IAA1CgD,EAAW,uDAAG,GAAIC,EAAa,uDAAG,GAC3CC,EAAW,IAAIC,IAAQC,SACvBC,EAAYH,EAASI,aAAaC,IAAQnE,EAAE,aAElDoE,yBAAe,CACXC,UAAWzD,EAAEyD,UACbJ,UAAWA,EACXK,cAAe,YAA8B,IAA3BC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAExB,GAAyB,SAArBD,EAASE,QAAoB,CAC7B,IAAMC,EAASb,EAAcc,MAAK,SAAAC,GAAC,OAAIL,EAASM,OAAOrC,YAAcoC,EAAEE,IAAI,IACvEJ,GAAUH,EAASlB,QACnBmB,EAAUnB,MAAQkB,EAASlB,MAAM0B,KAAI,SAAAC,GAEjC,OADYN,EAAO7D,KAAK8D,MAAK,SAAAM,GAAC,OAAIA,EAAEP,EAAOQ,cAAgBF,EAAEN,EAAOS,WAAW,IACpET,EAAOU,YACtB,IAAGC,QAGHzB,EAAYe,MAAK,SAAAC,GAAC,OAAIL,EAASM,OAAOrC,YAAcoC,CAAC,MACrDJ,EAAUnB,MAAQiC,qBAAWf,EAASlB,MAAO,CAAEkC,SAAU,QAG3B,YAA9BhB,EAASM,OAAOrC,YAChBgC,EAAUnB,MAAQ,IAAImC,KAAKjB,EAASlB,OAAOoC,gBAEb,aAA9BlB,EAASM,OAAOrC,YAChBgC,EAAUnB,MAAQkB,EAASlB,MAAQc,IAAQnE,EAAE,OAASmE,IAAQnE,EAAE,MAExE,CACyB,UAArBuE,EAASE,UACTD,EAAUkB,KAAO,CAAE5E,KAAM,UAAW6E,QAAS,QAASC,QAAS,CAAEC,KAAM,YAElD,gBAArBtB,EAASE,SAA6BD,EAAUnB,QAChDmB,EAAUsB,KAAKC,QAAS,EAEhC,IACDC,MAAK,WACJlC,EAASmC,KAAKC,cAAcF,MAAK,SAACG,GAC9BC,IAAO,IAAIC,KAAK,CAACF,GAAS,CAAErF,KAAM,6BAA+B,gBACrE,GACJ,IACAF,EAAE0F,QAAS,CACd,C","file":"static/js/25.ec8925b0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Editing, Export, FilterPanel, FilterRow, Form, Pager, Paging, Popup, Position, SearchPanel, Sorting } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { promotionsDataGrid } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\n\r\nconst Promotions = ({ PERMISSIONS }) => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Promotions')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={promotionsDataGrid}\r\n                    showBorders\r\n                    remoteOperations\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    onInitNewRow={(e) => e.data.type = 'One_Time'}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                    onExporting={datagridExporter}\r\n                >\r\n                    <Paging defaultPageSize={10} />\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode='popup'\r\n                        useIcons\r\n                        allowUpdating={PERMISSIONS.UPDATE}\r\n                        allowDeleting={PERMISSIONS.DELETE}\r\n                        allowAdding={PERMISSIONS.ADD}\r\n                        refreshMode='reshape'\r\n                    >\r\n                        <Popup title={t('Promotion')} showTitle resizeEnabled >\r\n                            <Position my=\"middle\" at=\"middle\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item\r\n                                    dataField=\"descriptionEn\"\r\n                                    editorType=\"dxTextArea\"\r\n                                    isRequired\r\n                                    colSpan={2}\r\n                                    editorOptions={{ height: 100, inputAttr: { style: 'direction:ltr' } }} />\r\n                                <Item isRequired dataField='code' editorOptions={{ inputAttr: { style: 'direction:ltr' } }} />\r\n                                <Item dataField='discountUsd' />\r\n                                <Item dataField='discountRatio' />\r\n                                <Item dataField='useCountLimit' />\r\n                                <Item isRequired dataField='startAt' />\r\n                                <Item isRequired dataField='endAt' />\r\n                                <Item dataField='isActive' colSpan={2} />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n                    <Pager\r\n                        showPageSizeSelector\r\n                        allowedPageSizes={[10, 20, 50, 100, 500, 1000]}\r\n                        showInfo\r\n                        showNavigationButtons\r\n                    />\r\n                    <Column dataField=\"descriptionEn\" caption={t('Description')} cellRender={({ value }) => <div className='english'>{value}</div>} />\r\n                    <Column dataField=\"code\" caption={t('Code')} cellRender={({ value }) => <div className='english'>{value}</div>} />\r\n                    <Column dataField=\"discountUsd\" caption={t('Discount')} dataType=\"number\" format={{ type: \"currency\", precision: 2 }} />\r\n                    <Column dataField=\"discountRatio\" caption={t('DiscountRatio')} dataType=\"number\" format=\"#%\" />\r\n                    <Column dataField=\"useCountLimit\" dataType=\"number\" caption={t('Limit')} />\r\n                    <Column dataField=\"startAt\" dataType=\"date\" caption={t('StartAt')} />\r\n                    <Column dataField=\"endAt\" dataType=\"date\" caption={t('EndAt')} />\r\n\r\n                    <Column dataField=\"creatAt\" dataType=\"date\" caption={t('CreatedAt')} />\r\n                    <Column\r\n                        caption={t('Active')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isActive'\r\n                    />\r\n                    <Export enabled={PERMISSIONS.EXPORT} />\r\n                </DataGrid>\r\n            </Segment>\r\n        </Segment >\r\n    );\r\n};\r\n\r\nexport default Promotions;\r\n","import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};"],"sourceRoot":""}