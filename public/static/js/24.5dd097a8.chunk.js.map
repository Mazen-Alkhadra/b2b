{"version":3,"sources":["pages/admin section/packages/Subscriptions.js","helpers/datagridExporter.js","pages/admin section/packages/PackagesFeatures.js"],"names":["DS","store","featuresDataLookup","name","RequireFetchData","props","features","PERMISSIONS","t","useTranslation","useState","showFeatures","setShowFeatures","row","setRow","onHideFeatures","lookUpEditCellRender","cell","searchExpr","valueExpr","displayExpr","searchEnabled","searchMode","defaultValue","value","column","lookup","disabled","isNewRow","onValueChanged","setValue","basic","title","dataSource","subscriptionsDataGrid","showBorders","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","remoteOperations","repaintChangesOnly","loadPanel","indicatorSrc","LoadingGifImage","onExporting","datagridExporter","grouping","defaultPageSize","showPageSizeSelector","allowedPageSizes","showInfo","showNavigationButtons","mode","autoExpandAll","visible","useIcons","allowAdding","ADD","allowUpdating","UPDATE","allowDeleting","DELETE","refreshMode","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","isRequired","dataField","groupIndex","caption","editCellRender","data","firstName","lastName","email","usersDataLookup","filter","nameEn","isActive","packagesDataLookup","format","type","precision","code","discountUsd","promotionsDataLookup","dataType","hint","icon","onClick","e","subscriptionPackageId","enabled","EXPORT","onClose","open","content","id","onSave","readOnly","closeIcon","header","size","centered","closeOnDimmerClick","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","map","v","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","memo","withTranslation","fets","setFets","values","setValues","loading","setLoading","error","setError","getPackageFeatures","request","get","newFets","i","length","j","idSubscriptionFeature","subscriptionFeatureId","featureValue","f","postPackageFeatures","post","s","useEffect","keyExpr","hoverStateEnabled","selectedRowKeys","onSelectionChanged","selectedRowsData","allowEditing","textAlign","positive"],"mappings":"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","file":"static/js/24.5dd097a8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Button, Editing, FilterPanel, Popup, FilterRow, Form, Grouping, Lookup, Position, Pager, Paging, RemoteOperations, RequiredRule, SearchPanel, Sorting, Export } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport { SelectBox } from 'devextreme-react/ui/select-box';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { subscriptionsDataGrid, usersDataLookup, packagesDataLookup, promotionsDataLookup, featuresDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../middlewares/HOC';\r\nimport PackagesFeatures from './PackagesFeatures';\r\n\r\nconst Subscriptions = (props) => {\r\n\r\n    const { features, PERMISSIONS } = props;\r\n    const { t } = useTranslation();\r\n\r\n\r\n    const [showFeatures, setShowFeatures] = useState(false);\r\n    const [row, setRow] = useState([]);\r\n\r\n    const onShowFeatures = (e) => {\r\n        setRow([e.row.data.subscriptionPackageId]);\r\n        setShowFeatures(true);\r\n    };\r\n\r\n    const onHideFeatures = () => {\r\n        setShowFeatures(false);\r\n        setRow([]);\r\n    };\r\n\r\n    const lookUpEditCellRender = (cell, searchExpr, valueExpr, displayExpr) => {\r\n        return <SelectBox\r\n            searchEnabled\r\n            searchExpr={searchExpr}\r\n            searchMode='contains'\r\n            defaultValue={cell.value}\r\n            {...cell.column.lookup}\r\n            disabled={!cell.row.isNewRow}\r\n            valueExpr={valueExpr}\r\n            displayExpr={displayExpr}\r\n            onValueChanged={({ value }) => cell.setValue(value)}\r\n        />;\r\n    };\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Subscriptions')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={subscriptionsDataGrid}\r\n                    showBorders\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    remoteOperations\r\n                    repaintChangesOnly\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                    onExporting={datagridExporter}\r\n                >\r\n                    <RemoteOperations grouping />\r\n                    <Paging defaultPageSize={10} />\r\n                    <Pager\r\n                        showPageSizeSelector\r\n                        allowedPageSizes={[10, 20, 50, 100, 500, 1000]}\r\n                        showInfo\r\n                        showNavigationButtons\r\n                    />\r\n                    <Sorting mode='multiple' />\r\n                    <Grouping autoExpandAll={false} />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <SearchPanel visible />\r\n\r\n                    <Editing\r\n                        mode='popup'\r\n                        useIcons\r\n                        allowAdding={PERMISSIONS.ADD}\r\n                        allowUpdating={PERMISSIONS.UPDATE}\r\n                        allowDeleting={PERMISSIONS.DELETE}\r\n                        refreshMode='reshape'\r\n                    >\r\n                        <Popup title={t('Subscription')} showTitle resizeEnabled >\r\n                            <Position my=\"middle\" at=\"middle\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item isRequired dataField='userId' colSpan={2} />\r\n                                <Item isRequired dataField='subscriptionPackageId' colSpan={2} />\r\n                                <Item dataField='promotionId' colSpan={2} />\r\n                                <Item dataField='isActive' />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n\r\n                    <Column dataField=\"userId\" groupIndex={0} caption={t('User')} editCellRender={(cell) => lookUpEditCellRender(cell, 'email', 'idUser', (data) => (data && `${data.firstName} ${data.lastName} [${data.email}]`))}>\r\n                        <Lookup\r\n                            dataSource={{ store: usersDataLookup, filter: [\"isAdmin\", '=', false] }}\r\n                            displayExpr={(data) => (data && `${data.firstName} ${data.lastName} [${data.email}]`)}\r\n                            valueExpr=\"idUser\"\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"subscriptionPackageId\" caption={t('Package')} editCellRender={(cell) => lookUpEditCellRender(cell, 'nameEn', 'idSubscriptionPackage', (data) => (data && `${data.nameEn} / ${t('Active')} [${data.isActive ? t('YES') : t('NO')}]`))}>\r\n                        <Lookup\r\n                            dataSource={packagesDataLookup}\r\n                            displayExpr=\"nameEn\"\r\n                            valueExpr=\"idSubscriptionPackage\"\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"actualCostUsd\" caption={t('Price')} format={{ type: \"currency\", precision: 2 }} />\r\n                    <Column dataField=\"promotionId\" caption={t('Promotion')} editCellRender={(cell) => lookUpEditCellRender(cell, 'code', 'idPromotion', (data) => (data && `ID [ ${data.code} ] | ${t('Discount')}: [ ${data.discountUsd} $ ]`))}>\r\n                        <Lookup\r\n                            dataSource={promotionsDataLookup}\r\n                            displayExpr={(data) => (data && `ID [ ${data.code} ]`)}\r\n                            valueExpr='idPromotion'\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"subscribAt\" dataType=\"date\" caption={t('StartAt')} />\r\n                    <Column dataField=\"expirAt\" dataType=\"date\" caption={t('EndAt')} />\r\n                    {/* <Column dataField='paymentStatus' caption={t('Status')} /> */}\r\n                    <Column\r\n                        caption={t('Active')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isActive'\r\n                    />\r\n                    <Column\r\n                        caption={t('Valid')}\r\n                        dataType=\"boolean\"\r\n                        dataField='isValid'\r\n                    />\r\n\r\n                    <Column type=\"buttons\" caption={t('Actions')}>\r\n                        <Button name=\"edit\" />\r\n                        <Button name=\"delete\" />\r\n                        {PERMISSIONS.UPDATE && <Button hint={t('Features')} icon=\"bulletlist\" onClick={onShowFeatures} />}\r\n                    </Column>\r\n\r\n                    <Export enabled={PERMISSIONS.EXPORT} />\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n            <Modal\r\n                onClose={onHideFeatures}\r\n                open={showFeatures}\r\n                content={<PackagesFeatures id={row[0]} features={features} onSave={onHideFeatures} readOnly />}\r\n                closeIcon\r\n                header={t('Features')}\r\n                size='large'\r\n                centered\r\n                closeOnDimmerClick={false}\r\n            />\r\n        </Segment>\r\n    );\r\n};\r\n\r\n\r\nconst DS = [{\r\n    store: featuresDataLookup,\r\n    name: 'features'\r\n}];\r\n\r\nexport default RequireFetchData(Subscriptions, DS);","import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","import React, { useEffect, useState, memo } from 'react';\r\nimport { Button, Segment } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport DataGrid, { Column, Selection, Editing } from 'devextreme-react/data-grid';\r\nimport request from '../../../api';\r\nimport { ErrorSegment } from '../../../components';\r\n\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\n\r\n\r\nconst PackageFeatures = ({ id, features, onSave, t, readOnly }) => {\r\n    const [fets, setFets] = useState(features);\r\n    const [values, setValues] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const getPackageFeatures = async () => {\r\n        try {\r\n            const { data: { data } } = await request.get(`/admin/subscription/package/${id}/features`);\r\n            const newFets = [...fets];\r\n            for (let i = 0; i < fets.length; i++) {\r\n                for (let j = 0; j < data.length; j++) {\r\n                    if (fets[i].idSubscriptionFeature === data[j].subscriptionFeatureId)\r\n                        newFets[i].featureValue = data[j].featureValue;\r\n                }\r\n            }\r\n            setFets(newFets);\r\n            setValues(data.map(f => ({ ...f, idSubscriptionFeature: f.subscriptionFeatureId })));\r\n        } catch (err) {\r\n            setError(err);\r\n        }\r\n    };\r\n\r\n    const postPackageFeatures = async () => {\r\n        try {\r\n            setLoading(true);\r\n            await request.post('/admin/subscription/package/features/reset', { features: values.filter(s => s.featureValue).map(f => ({ ...f, subscriptionFeatureId: f.idSubscriptionFeature })), subscriptionPackageId: id });\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setLoading(false);\r\n            if (onSave) onSave();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPackageFeatures();\r\n        return () => setValues([]);\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    if (error) return <ErrorSegment />;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <DataGrid\r\n                dataSource={fets}\r\n                keyExpr=\"idSubscriptionFeature\"\r\n                wordWrapEnabled\r\n                columnAutoWidth\r\n                showBorders\r\n                columnHidingEnabled\r\n                hoverStateEnabled\r\n                loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                selectedRowKeys={values.map(f => f.idSubscriptionFeature)}\r\n                onSelectionChanged={(e) => setValues((e.selectedRowsData.length && e.selectedRowsData.filter(s => s.featureValue)) || [])}\r\n            >\r\n                {!readOnly && <Editing\r\n                    mode='batch'\r\n                    useIcons\r\n                    allowUpdating\r\n                    refreshMode='reshape'\r\n                />}\r\n\r\n                {!readOnly && <Selection mode=\"multiple\" />}\r\n                <Column dataField=\"nameEn\" allowEditing={false} caption={t('Time')} />\r\n                <Column dataField=\"descriptionEn\" allowEditing={false} caption={t('Description')} />\r\n                <Column dataField=\"featureValue\" dataType='number' caption={t('Value')} />\r\n            </DataGrid>\r\n\r\n            {!readOnly && <Segment basic textAlign='right'>\r\n                <Button onClick={postPackageFeatures} positive loading={loading}>{t('Save')}</Button>\r\n            </Segment>}\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default memo(withTranslation()(PackageFeatures));\r\n"],"sourceRoot":""}