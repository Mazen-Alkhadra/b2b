{"version":3,"sources":["pages/admin section/services/Orders.js","helpers/datagridExporter.js"],"names":["DS","store","productsDataLookup","name","usersDataLookup","orderStatusDataLookup","citiesDataLookup","RequireFetchData","props","t","useTranslation","PERMISSIONS","products","users","orderStatus","cities","basic","title","dataSource","ordersDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","repaintChangesOnly","remoteOperations","allowColumnResizing","allowColumnReordering","onExporting","datagridExporter","loadPanel","indicatorSrc","LoadingGifImage","mode","visible","useIcons","allowAdding","ADD","allowUpdating","UPDATE","allowDeleting","DELETE","refreshMode","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","isRequired","dataField","caption","editorOptions","wrapItemText","valueExpr","displayExpr","data","firstName","lastName","email","paginate","pageSize","categoryNameEn","brandNameEn","nameEn","dataType","enabled","EXPORT","e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","value","map","v","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel"],"mappings":"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","file":"static/js/32.0b30b526.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, FilterPanel, FilterRow, Scrolling, Editing, Form, Popup, Position, SearchPanel, Lookup, Sorting, Export, RequiredRule } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader } from '../../../components';\r\nimport { citiesDataLookup, ordersDataGrid, orderStatusDataLookup, productsDataLookup, usersDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../middlewares/HOC';\r\n\r\nconst Orders = (props) => {\r\n    const { t } = useTranslation();\r\n    const { PERMISSIONS, products, users, orderStatus, cities } = props;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Orders')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={ordersDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    repaintChangesOnly\r\n                    remoteOperations\r\n                    allowColumnResizing\r\n                    allowColumnReordering\r\n                    onExporting={datagridExporter}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"infinite\" />\r\n                    <SearchPanel visible />\r\n                    <Editing\r\n                        mode=\"popup\"\r\n                        useIcons\r\n                        allowAdding={PERMISSIONS.ADD}\r\n                        allowUpdating={PERMISSIONS.UPDATE}\r\n                        allowDeleting={PERMISSIONS.DELETE}\r\n                        refreshMode='reshape'\r\n                    >\r\n                        <Popup title={t('Order')} showTitle resizeEnabled >\r\n                            <Position my=\"middle\" at=\"middle\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item isRequired dataField='name' />\r\n                                <Item isRequired dataField='productId' />\r\n                                <Item isRequired dataField='quantity' />\r\n                                <Item isRequired dataField='from' />\r\n                                <Item isRequired dataField='to' />\r\n                                <Item dataField='deliverBefore' />\r\n\r\n                                <Item isRequired dataField='status' />\r\n                                <Item dataField='closedAt' />\r\n                                <Item dataField=\"cityId\" isRequired />\r\n                                <Item dataField=\"area\" />\r\n                                <Item dataField=\"street\" />\r\n                                <Item dataField=\"buildingNumber\" />\r\n                                <Item dataField='addressLongitude' />\r\n                                <Item dataField='addressLatitude' />\r\n                                <Item dataField='moreAddressInfo' />\r\n                                <Item dataField='supplierLocation' />\r\n                                <Item dataField='payMethod' />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n                    <Column dataField=\"name\" caption={t('Name')} />\r\n                    <Column dataField=\"serialNum\" caption={t('SerialNumber')} />\r\n                    <Column dataField=\"creatByUserId\" caption={t('User')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={users}\r\n                            valueExpr=\"idUser\"\r\n                            displayExpr={(data) => data && `${data.firstName} ${data.lastName} / ${data.email}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"productId\" caption={t('Product')} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={{\r\n                                store: products,\r\n                                paginate: true,\r\n                                pageSize: 50,\r\n                            }}\r\n                            valueExpr=\"idProduct\"\r\n                            displayExpr={(data) => data && `${data.categoryNameEn} / ${data.brandNameEn} / ${data.nameEn}`}\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"quantity\" caption={t('Quantity')} />\r\n                    <Column dataField=\"from\" dataType=\"datetime\" caption={t(\"From\")} />\r\n                    <Column dataField=\"to\" dataType=\"datetime\" caption={t(\"To\")} />\r\n                    <Column dataField=\"closedAt\" dataType=\"datetime\" caption={t(\"ClosedAt\")} />\r\n                    <Column dataField=\"deliverBefore\" dataType=\"datetime\" caption={t(\"Deliver Before\")} />\r\n                    <Column dataField=\"status\" caption={t(\"Status\")} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={orderStatus}\r\n                            valueExpr='type'\r\n                            displayExpr='value'\r\n                        />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"cityId\" caption={t('City')} >\r\n                        <Lookup\r\n                            dataSource={{\r\n                                store: cities,\r\n                                paginate: true,\r\n                                pageSize: 50,\r\n                            }}\r\n                            valueExpr=\"idCity\"\r\n                            displayExpr=\"nameEn\"\r\n                        />\r\n                    </Column>\r\n                    <Column dataField=\"area\" caption={t('Area')} />\r\n                    <Column dataField=\"street\" caption={t('Street')} />\r\n                    <Column dataField=\"buildingNumber\" caption={t('BuildingNumber')} />\r\n                    <Column dataField=\"addressLongitude\" caption={t('Longitude')} />\r\n                    <Column dataField=\"addressLatitude\" caption={t('Latitude')} />\r\n                    <Column dataField=\"moreAddressInfo\" caption={t('Notes')} />\r\n                    <Column dataField=\"supplierLocation\" caption={t(\"SupplierLocation\")} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={['LOCAL', 'UAE', 'GLOBAL']}\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n\r\n                    <Column dataField=\"payMethod\" caption={t(\"PaymentMethod\")} editorOptions={{ wrapItemText: true }}>\r\n                        <Lookup\r\n                            dataSource={['CASH', 'E_PAY','CHEQUE']}\r\n                        />\r\n                        <RequiredRule />\r\n                    </Column>\r\n                    <Export enabled={PERMISSIONS.EXPORT} />\r\n                </DataGrid>\r\n            </Segment>\r\n\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst DS = [\r\n\r\n    {\r\n        store: productsDataLookup,\r\n        name: 'products'\r\n    },\r\n    {\r\n        store: usersDataLookup,\r\n        name: 'users'\r\n    },\r\n    {\r\n        store: orderStatusDataLookup,\r\n        name: 'orderStatus'\r\n    },\r\n    {\r\n        store: citiesDataLookup,\r\n        name: 'cities'\r\n    }\r\n];\r\n\r\nexport default RequireFetchData(Orders, DS);\r\n","import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};"],"sourceRoot":""}