{"version":3,"sources":["pages/admin section/hr/Resources.js","pages/admin section/hr/Roles.js"],"names":["withTranslation","t","roleId","resources","PERMISSIONS","useState","selectedResources","setSelectedResources","loading","setLoading","error","setError","activeIndex","setActiveIndex","expandAll","setExpandAll","handleClick","e","titleProps","index","useEffect","getRoleResources","roleResourcesDataGrid","load","data","map","r","permissions","idResource","setRoleResourcues","resourceToSend","id","Object","keys","filter","k","reset","length","Segment","basic","Grid","columns","GridColumn","Header","as","textAlign","Icon","link","name","onClick","Accordion","Menu","vertical","fluid","Item","Title","active","content","style","padding","margin","color","toUpperCase","Content","Form","unstackable","size","Group","inline","widths","label","value","p","Checkbox","checked","onChange","rIndex","permission","newResourcers","onPermissionChanged","Divider","hidden","Button","icon","positive","labelPosition","setResourcers","getAllResources","allResourcesDataLookup","title","dataSource","rolesDataGrid","showBorders","showColumnLines","columnHidingEnabled","wordWrapEnabled","columnAutoWidth","repaintChangesOnly","remoteOperations","hoverStateEnabled","onSelectionChanged","component","collapseAll","expandRow","currentSelectedRowKeys","onContentReady","getSelectedRowKeys","loadPanel","indicatorSrc","LoadingGifImage","mode","visible","useIcons","allowUpdating","allowDeleting","allowAdding","refreshMode","itemType","colCount","colSpan","dataField","isRequired","caption","setCellValue","newData","idRole","replaceAll","enabled","render"],"mappings":"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","file":"static/js/27.d8fec052.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, Divider, Segment, Accordion, Menu, Form, Header, Grid, GridColumn, Icon } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { roleResourcesDataGrid } from '../../../Data Stores';\r\nimport { ErrorSegment } from '../../../components';\r\n\r\nconst Resources = ({ t, roleId, resources, PERMISSIONS }) => {\r\n    const [selectedResources, setSelectedResources] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [expandAll, setExpandAll] = useState(false);\r\n\r\n    const handleClick = (e, titleProps) => {\r\n        const { index } = titleProps;\r\n        const newIndex = activeIndex === index ? -1 : index;\r\n        setActiveIndex(newIndex);\r\n    };\r\n\r\n    const onPermissionChanged = (rIndex, permission) => {\r\n        const newResourcers = [...selectedResources];\r\n        newResourcers[rIndex].permissions[permission.label] = !permission.value;\r\n        setSelectedResources(newResourcers);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getRoleResources();\r\n        return () => setSelectedResources([]);\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    const getRoleResources = async () => {\r\n        try {\r\n            const { data } = await roleResourcesDataGrid(roleId).load();\r\n            setSelectedResources(resources.map(r => ({ ...r, permissions: { ...r.permissions, ...data[r.idResource] } })));\r\n        } catch (err) {\r\n            setError(err);\r\n        }\r\n    };\r\n\r\n    const setRoleResourcues = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const resourceToSend = selectedResources.map(r => ({ id: r.idResource, permissions: Object.keys(r.permissions).filter(k => r.permissions[k]) }));\r\n            await roleResourcesDataGrid.reset(roleId, resourceToSend);\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (!selectedResources.length) return <Segment basic loading />;\r\n    if (error) return <ErrorSegment />;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <Grid columns='2'>\r\n                <GridColumn>\r\n                    <Header as='h4'>{t('Resources')}</Header>\r\n                </GridColumn>\r\n\r\n                <GridColumn textAlign='right'>\r\n                    <Icon link name={expandAll ? 'compress' : 'expand'} onClick={() => setExpandAll(!expandAll)} />\r\n                </GridColumn>\r\n            </Grid>\r\n            <Accordion as={Menu} vertical fluid>\r\n                {\r\n                    selectedResources.map((r, index) => {\r\n                        return <Menu.Item key={index}>\r\n\r\n                            <Accordion.Title\r\n                                active={expandAll ? true : activeIndex === index}\r\n                                content={<Header as='h4' style={{ padding: 0, margin: 0 }} color={expandAll ? 'blue' : activeIndex === index ? 'blue' : 'black'}>{r.name.toUpperCase()}</Header>}\r\n                                index={index}\r\n                                onClick={expandAll ? null : handleClick}\r\n                            />\r\n                            <Accordion.Content\r\n                                active={expandAll ? true : activeIndex === index}\r\n                                content={\r\n                                    <Form unstackable size='mini'>\r\n                                        <Form.Group inline widths='equal'>\r\n                                            {\r\n\r\n                                                Object.keys(r.permissions)\r\n                                                    .map(k => ({ label: k, value: r.permissions[k] }))\r\n                                                    .map(p => <Form.Checkbox\r\n                                                        key={p.label}\r\n                                                        label={t(p.label)}\r\n                                                        checked={p.value}\r\n                                                        onChange={() => onPermissionChanged(index, p)}\r\n                                                    />)\r\n                                            }\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                } />\r\n                        </Menu.Item>;\r\n                    })\r\n                }\r\n            </Accordion>\r\n            <Divider hidden />\r\n            <Button icon='save' loading={loading} positive labelPosition='left' content={t('Save')} onClick={setRoleResourcues} />\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default withTranslation()(Resources);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Column, Editing, FilterPanel, FilterRow, Form, MasterDetail, Scrolling, SearchPanel, Selection, Sorting } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport { withTranslation } from 'react-i18next';\r\nimport Resources from './Resources';\r\nimport { PageHeader } from '../../../components';\r\nimport { rolesDataGrid, allResourcesDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\n\r\nconst Roles = ({ t, PERMISSIONS }) => {\r\n\r\n    const [resources, setResourcers] = useState([]);\r\n    const contentReady = (e) => {\r\n        if (!e.component.getSelectedRowKeys().length) {\r\n            // e.component.selectRowsByIndexes(0);\r\n        }\r\n    };\r\n    const selectionChanged = (e) => {\r\n        e.component.collapseAll(-1);\r\n        e.component.expandRow(e.currentSelectedRowKeys[0]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!resources.length)\r\n            getAllResources();\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    const getAllResources = async () => {\r\n        try {\r\n            const { data } = await allResourcesDataLookup.load();\r\n            setResourcers(data);\r\n        } catch (err) {\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Segment basic>\r\n            <PageHeader title={t('Roles')} />\r\n            <Segment basic>\r\n                <DataGrid\r\n                    dataSource={rolesDataGrid}\r\n                    showBorders\r\n                    showColumnLines\r\n                    columnHidingEnabled\r\n                    wordWrapEnabled\r\n                    columnAutoWidth\r\n                    repaintChangesOnly\r\n                    remoteOperations\r\n                    hoverStateEnabled\r\n                    onSelectionChanged={selectionChanged}\r\n                    // selectedRowKeys={row}\r\n                    onContentReady={contentReady}\r\n                    loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                >\r\n                    <Sorting mode='multiple' />\r\n                    <FilterRow visible />\r\n                    <FilterPanel visible />\r\n                    <Scrolling mode=\"virtual\" />\r\n                    <SearchPanel visible />\r\n                    <Selection mode='single' />\r\n                    <Editing\r\n                        mode='form'\r\n                        useIcons\r\n                        allowUpdating\r\n                        allowDeleting\r\n                        allowAdding\r\n                        refreshMode='reshape'\r\n                    >\r\n\r\n                        <Form>\r\n                            <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                <Item\r\n                                    dataField=\"name\"\r\n                                    colSpan={2}\r\n                                    isRequired\r\n                                />\r\n                            </Item>\r\n                        </Form>\r\n                    </Editing>\r\n\r\n\r\n                    <Column dataField=\"idRole\" caption={t('ID')} />\r\n                    <Column dataField=\"name\" caption={t('Name')} setCellValue={(newData, value) => {\r\n                        newData.idRole = value.replaceAll(\" \", \"_\").toUpperCase();\r\n                        newData.name = value;\r\n                    }} />\r\n\r\n                    <MasterDetail enabled={false} render={({ data: { idRole } }) => <Resources roleId={idRole} PERMISSIONS={PERMISSIONS} resources={resources} />} />\r\n                </DataGrid>\r\n            </Segment>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default withTranslation()(Roles);\r\n"],"sourceRoot":""}