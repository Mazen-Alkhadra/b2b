{"version":3,"sources":["helpers/datagridExporter.js","pages/admin section/packages/PackagesFeatures.js","pages/admin section/packages/Packages.js","helpers/stringShorten.js"],"names":["e","htmlColumns","objectColumns","workbook","ExcelJS","Workbook","worksheet","addWorksheet","i18next","t","exportDataGrid","component","customizeCell","gridCell","excelCell","rowType","objCol","find","c","column","dataField","name","value","map","v","data","d","fieldName1","fieldName2","displayName","join","htmlToText","wordwrap","Date","toDateString","fill","type","pattern","fgColor","argb","font","italic","then","xlsx","writeBuffer","buffer","saveAs","Blob","cancel","memo","withTranslation","id","features","onSave","useState","fets","setFets","values","setValues","loading","setLoading","error","setError","getPackageFeatures","request","get","newFets","i","length","j","idSubscriptionFeature","subscriptionFeatureId","featureValue","f","postPackageFeatures","post","filter","s","subscriptionPackageId","useEffect","Segment","basic","dataSource","keyExpr","wordWrapEnabled","columnAutoWidth","showBorders","columnHidingEnabled","hoverStateEnabled","loadPanel","indicatorSrc","LoadingGifImage","selectedRowKeys","onSelectionChanged","selectedRowsData","mode","useIcons","allowUpdating","refreshMode","allowEditing","caption","dataType","textAlign","Button","onClick","positive","DS","store","featuresDataLookup","RequireFetchData","PERMISSIONS","useTranslation","showFeatures","setShowFeatures","row","setRow","onHideFeatures","title","packagesDataGrid","repaintChangesOnly","remoteOperations","onExporting","datagridExporter","grouping","autoExpandAll","visible","allowDeleting","allowAdding","showTitle","resizeEnabled","my","at","of","window","itemType","colCount","colSpan","isRequired","editorType","editorOptions","height","width","allowSorting","allowFiltering","cellRender","Image","src","fluid","editCellComponent","ProfileImageUploader","str","num","n","slice","stringShorten","format","precision","calculateDisplayValue","validitySeconds","calculateFilterExpression","filterValue","selectedFilterOperation","calculateCellValue","hint","icon","idSubscriptionPackage","Modal","onClose","open","content","closeIcon","header","size","centered","closeOnDimmerClick"],"mappings":"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","file":"static/js/20.1e727370.chunk.js","sourcesContent":["import { exportDataGrid } from 'devextreme/exporter/exceljs/export_data_grid';\r\nimport { htmlToText } from 'html-to-text';\r\nimport i18next from 'i18next';\r\nimport saveAs from 'file-saver';\r\nimport ExcelJS from 'exceljs';\r\n\r\nexport default (e, htmlColumns = [], objectColumns = []) => {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(i18next.t('DataGrid'));\r\n\r\n    exportDataGrid({\r\n        component: e.component,\r\n        worksheet: worksheet,\r\n        customizeCell: ({ gridCell, excelCell }) => {\r\n\r\n            if (gridCell.rowType === 'data') {\r\n                const objCol = objectColumns.find(c => gridCell.column.dataField === c.name);\r\n                if (objCol && gridCell.value) {\r\n                    excelCell.value = gridCell.value.map(v => {\r\n                        const res = objCol.data.find(d => d[objCol.fieldName1] === v[objCol.fieldName2]);\r\n                        return res[objCol.displayName];\r\n                    }).join();\r\n                }\r\n\r\n                if (htmlColumns.find(c => gridCell.column.dataField === c)) {\r\n                    excelCell.value = htmlToText(gridCell.value, { wordwrap: null });\r\n                }\r\n\r\n                if (gridCell.column.dataField === 'creatAt') {\r\n                    excelCell.value = new Date(gridCell.value).toDateString();\r\n                }\r\n                if (gridCell.column.dataField === 'isActive') {\r\n                    excelCell.value = gridCell.value ? i18next.t('YES') : i18next.t('NO');\r\n                }\r\n            }\r\n            if (gridCell.rowType === 'group') {\r\n                excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'BEDFE6' } };\r\n            }\r\n            if (gridCell.rowType === 'totalFooter' && excelCell.value) {\r\n                excelCell.font.italic = true;\r\n            }\r\n        }\r\n    }).then(() => {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n        });\r\n    });\r\n    e.cancel = true;\r\n};","import React, { useEffect, useState, memo } from 'react';\r\nimport { Button, Segment } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport DataGrid, { Column, Selection, Editing } from 'devextreme-react/data-grid';\r\nimport request from '../../../api';\r\nimport { ErrorSegment } from '../../../components';\r\n\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\n\r\n\r\nconst PackageFeatures = ({ id, features, onSave, t }) => {\r\n    const [fets, setFets] = useState(features);\r\n    const [values, setValues] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    const getPackageFeatures = async () => {\r\n        try {\r\n            const { data: { data } } = await request.get(`/admin/subscription/package/${id}/features`);\r\n            const newFets = [...fets];\r\n            for (let i = 0; i < fets.length; i++) {\r\n                for (let j = 0; j < data.length; j++) {\r\n                    if (fets[i].idSubscriptionFeature === data[j].subscriptionFeatureId)\r\n                        newFets[i].featureValue = data[j].featureValue;\r\n                }\r\n            }\r\n            setFets(newFets);\r\n            setValues(data.map(f => ({ ...f, idSubscriptionFeature: f.subscriptionFeatureId })));\r\n        } catch (err) {\r\n            setError(err);\r\n        }\r\n    };\r\n\r\n    const postPackageFeatures = async () => {\r\n        try {\r\n            setLoading(true);\r\n            await request.post('/admin/subscription/package/features/reset', { features: values.filter(s => s.featureValue).map(f => ({ ...f, subscriptionFeatureId: f.idSubscriptionFeature })), subscriptionPackageId: id });\r\n        } catch (err) {\r\n            setError(err);\r\n        } finally {\r\n            setLoading(false);\r\n            if (onSave) onSave();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPackageFeatures();\r\n        return () => setValues([]);\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    if (error) return <ErrorSegment />;\r\n\r\n    return (\r\n        <Segment basic>\r\n            <DataGrid\r\n                dataSource={fets}\r\n                keyExpr=\"idSubscriptionFeature\"\r\n                wordWrapEnabled\r\n                columnAutoWidth\r\n                showBorders\r\n                columnHidingEnabled\r\n                hoverStateEnabled\r\n                loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                selectedRowKeys={values.map(f => f.idSubscriptionFeature)}\r\n                onSelectionChanged={(e) => setValues((e.selectedRowsData.length && e.selectedRowsData.filter(s => s.featureValue)) || [])}\r\n            >\r\n                <Editing\r\n                    mode='batch'\r\n                    useIcons\r\n                    allowUpdating\r\n                    refreshMode='reshape'\r\n                />\r\n                <Selection mode=\"multiple\" />\r\n                <Column dataField=\"nameEn\" allowEditing={false} caption={t('Name')} />\r\n                <Column dataField=\"descriptionEn\" allowEditing={false} caption={t('Description')} />\r\n                <Column dataField=\"featureValue\" dataType='number' caption={t('Value')} />\r\n            </DataGrid>\r\n\r\n            <Segment basic textAlign='right'>\r\n                <Button onClick={postPackageFeatures} positive loading={loading}>{t('Save')}</Button>\r\n            </Segment>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default memo(withTranslation()(PackageFeatures));\r\n","import React, { useState } from 'react';\r\nimport { Image, Modal, Segment } from 'semantic-ui-react';\r\nimport DataGrid, { Button, Column, Editing, FilterPanel, FilterRow, Form, Grouping, Popup, Position, RemoteOperations, Scrolling, SearchPanel, Sorting } from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/ui/form';\r\nimport 'devextreme-react/ui/text-area';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { PageHeader, ProfileImageUploader } from '../../../components';\r\nimport PackageFeatures from './PackagesFeatures';\r\nimport { packagesDataGrid, featuresDataLookup } from '../../../Data Stores';\r\nimport LoadingGifImage from '../../../res/images/loading.gif';\r\nimport stringShorten from '../../../helpers/stringShorten';\r\nimport datagridExporter from '../../../helpers/datagridExporter';\r\nimport { RequireFetchData } from '../../../middlewares/HOC';\r\n\r\n\r\nconst Packages = ({ PERMISSIONS, features }) => {\r\n\r\n    const { t } = useTranslation();\r\n    const [showFeatures, setShowFeatures] = useState(false);\r\n    const [row, setRow] = useState([]);\r\n\r\n    const onShowFeatures = (e) => {\r\n        setRow([e.row.data.idSubscriptionPackage]);\r\n        setShowFeatures(true);\r\n    };\r\n\r\n    const onHideFeatures = () => {\r\n        setShowFeatures(false);\r\n        setRow([]);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Segment basic>\r\n                <PageHeader title={t('Packages')} />\r\n                <Segment basic>\r\n                    <DataGrid\r\n                        dataSource={packagesDataGrid}\r\n                        showBorders\r\n                        columnHidingEnabled\r\n                        wordWrapEnabled\r\n                        columnAutoWidth\r\n                        repaintChangesOnly\r\n                        remoteOperations\r\n                        loadPanel={{ indicatorSrc: LoadingGifImage }}\r\n                        onExporting={datagridExporter}\r\n                    >\r\n                        <RemoteOperations grouping />\r\n                        <Sorting mode='multiple' />\r\n                        <Grouping autoExpandAll={false} />\r\n                        <FilterRow visible />\r\n                        <FilterPanel visible />\r\n                        <Scrolling mode=\"virtual\" />\r\n                        <SearchPanel visible />\r\n                        <Editing\r\n                            mode='popup'\r\n                            useIcons\r\n                            allowUpdating\r\n                            allowDeleting\r\n                            allowAdding\r\n                            refreshMode='reshape'\r\n                        >\r\n                            <Popup title={t('Package')} showTitle resizeEnabled >\r\n                                <Position my=\"middle\" at=\"middle\" of={window} />\r\n                            </Popup>\r\n                            <Form>\r\n                                <Item itemType=\"group\" colCount={2} colSpan={2}>\r\n                                    <Item isRequired dataField=\"nameEn\" />\r\n                                    <Item isRequired dataField='priceUsd' />\r\n                                    <Item isRequired dataField='validitySeconds' />\r\n                                    <Item dataField='isActive' />\r\n                                    <Item\r\n                                        dataField=\"descriptionEn\"\r\n                                        editorType=\"dxTextArea\"\r\n                                        colSpan={2}\r\n                                        editorOptions={{ height: 100 }} />\r\n\r\n                                    <Item dataField='imgUrl' colSpan={2} />\r\n                                </Item>\r\n                            </Form>\r\n                        </Editing>\r\n\r\n                        <Column dataField=\"imgUrl\"\r\n                            width={100}\r\n                            allowSorting={false}\r\n                            allowFiltering={false}\r\n                            caption={t('Photo')}\r\n                            cellRender={({ value }) => <Image src={value} fluid />}\r\n                            editCellComponent={ProfileImageUploader}\r\n                        />\r\n                        <Column dataField=\"nameEn\" caption={t('Name')} />\r\n                        <Column dataField=\"descriptionEn\" caption={t('Description')} cellRender={({ value }) => stringShorten(value)} />\r\n                        <Column dataField=\"priceUsd\" caption={t('Price')} format={{ type: \"currency\", precision: 2 }} />\r\n                        <Column calculateDisplayValue={({ validitySeconds }) => `${validitySeconds / 60 / 60 / 24} ${t('Days')}`} dataType='number' dataField='validitySeconds' calculateFilterExpression={(filterValue, selectedFilterOperation) => [\"validitySeconds\", selectedFilterOperation || '=', filterValue * 60 * 60 * 24]} calculateCellValue={({ validitySeconds }) => validitySeconds / 60 / 60 / 24} caption={t('Validity')} />\r\n                        {/* <Column dataField=\"expirAt\" dataType=\"date\" caption={t('EndAt')} /> */}\r\n                        <Column\r\n                            caption={t('Active')}\r\n                            dataType=\"boolean\"\r\n                            dataField='isActive'\r\n                        />\r\n                        <Column type=\"buttons\" caption={t('Actions')}>\r\n                            <Button name=\"edit\" />\r\n                            <Button name=\"delete\" />\r\n                            <Button hint={t('Features')} icon=\"bulletlist\" onClick={onShowFeatures} />\r\n                        </Column>\r\n                    </DataGrid>\r\n                </Segment>\r\n            </Segment>\r\n\r\n            <Modal\r\n                onClose={onHideFeatures}\r\n                open={showFeatures}\r\n                content={<PackageFeatures id={row[0]} features={features} onSave={onHideFeatures} />}\r\n                closeIcon\r\n                header={t('Features')}\r\n                size='large'\r\n                centered\r\n                closeOnDimmerClick={false}\r\n            />\r\n\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nconst DS = [{\r\n    store: featuresDataLookup,\r\n    name: 'features'\r\n}];\r\n\r\nexport default RequireFetchData(Packages, DS);","export default (str, num) => {\r\n    if (!str) return null;\r\n    const n = num || 70;\r\n    if (str.length <= n) {\r\n        return str\r\n    }\r\n    return str.slice(0, n) + '...'\r\n};\r\n"],"sourceRoot":""}