{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/collections/Message/MessageContent.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageItem.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageList.js","../node_modules/semantic-ui-react/dist/es/collections/Message/Message.js","pages/landing section/Auths/Activation.js","../node_modules/semantic-ui-react/dist/es/elements/Container/Container.js","../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js"],"names":["MessageContent","props","children","className","content","classes","cx","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","MessageHeader","create","createShorthandFactory","val","MessageItem","defaultProps","as","MessageList","items","_map","Message","_Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","handleDismiss","e","onDismiss","_inheritsLoose","prototype","render","_this$props","attached","color","compact","error","floating","header","hidden","icon","info","list","negative","positive","size","success","visible","warning","useKeyOnly","useKeyOrValueAndKey","dismissIcon","Icon","name","onClick","autoGenerateKey","_isNil","createHTMLParagraph","Component","Content","Header","List","Item","withTranslation","connect","activation","loading","activationInfoChanged","postActivationCode","reSendActivationCode","t","useState","userName","setUserName","code","setCode","showResend","setShowResend","onFocus","value","onActivatePressed","onResendPressed","basic","style","width","padding","backgroundColor","renderErrorMsg","Input","fluid","type","label","placeholder","required","maxLength","minLength","iconPosition","onChange","autoComplete","Button","toUpperCase","renderPostActivationForm","toLowerCase","renderResendForm","checked","Container","text","textAlign","useTextAlignProp","Divider","clearing","fitted","horizontal","inverted","section","vertical"],"mappings":"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","file":"static/js/21.a4836c89.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a content.\n */\n\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default MessageContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a header.\n */\n\nfunction MessageHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('header', className);\n  var rest = getUnhandledProps(MessageHeader, props);\n  var ElementType = getElementType(MessageHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageHeader.create = createShorthandFactory(MessageHeader, function (val) {\n  return {\n    content: val\n  };\n});\nexport default MessageHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message list can contain an item.\n */\n\nfunction MessageItem(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageItem, props);\n  var ElementType = getElementType(MessageItem, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageItem.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageItem.defaultProps = {\n  as: 'li'\n};\nMessageItem.create = createShorthandFactory(MessageItem, function (content) {\n  return {\n    content: content\n  };\n});\nexport default MessageItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport MessageItem from './MessageItem';\n/**\n * A message can contain a list of items.\n */\n\nfunction MessageList(props) {\n  var children = props.children,\n      className = props.className,\n      items = props.items;\n  var classes = cx('list', className);\n  var rest = getUnhandledProps(MessageList, props);\n  var ElementType = getElementType(MessageList, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? _map(items, MessageItem.create) : children);\n}\n\nMessageList.handledProps = [\"as\", \"children\", \"className\", \"items\"];\nMessageList.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand Message.Items. */\n  items: customPropTypes.collectionShorthand\n} : {};\nMessageList.defaultProps = {\n  as: 'ul'\n};\nMessageList.create = createShorthandFactory(MessageList, function (val) {\n  return {\n    items: val\n  };\n});\nexport default MessageList;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _without from \"lodash-es/without\";\nimport _isNil from \"lodash-es/isNil\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createHTMLParagraph, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\nimport Icon from '../../elements/Icon';\nimport MessageContent from './MessageContent';\nimport MessageHeader from './MessageHeader';\nimport MessageList from './MessageList';\nimport MessageItem from './MessageItem';\n/**\n * A message displays information that explains nearby content.\n * @see Form\n */\n\nvar Message = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Message, _Component);\n\n  function Message() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleDismiss = function (e) {\n      var onDismiss = _this.props.onDismiss;\n      if (onDismiss) onDismiss(e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = Message.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        attached = _this$props.attached,\n        children = _this$props.children,\n        className = _this$props.className,\n        color = _this$props.color,\n        compact = _this$props.compact,\n        content = _this$props.content,\n        error = _this$props.error,\n        floating = _this$props.floating,\n        header = _this$props.header,\n        hidden = _this$props.hidden,\n        icon = _this$props.icon,\n        info = _this$props.info,\n        list = _this$props.list,\n        negative = _this$props.negative,\n        onDismiss = _this$props.onDismiss,\n        positive = _this$props.positive,\n        size = _this$props.size,\n        success = _this$props.success,\n        visible = _this$props.visible,\n        warning = _this$props.warning;\n    var classes = cx('ui', color, size, useKeyOnly(compact, 'compact'), useKeyOnly(error, 'error'), useKeyOnly(floating, 'floating'), useKeyOnly(hidden, 'hidden'), useKeyOnly(icon, 'icon'), useKeyOnly(info, 'info'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(success, 'success'), useKeyOnly(visible, 'visible'), useKeyOnly(warning, 'warning'), useKeyOrValueAndKey(attached, 'attached'), 'message', className);\n    var dismissIcon = onDismiss && /*#__PURE__*/React.createElement(Icon, {\n      name: \"close\",\n      onClick: this.handleDismiss\n    });\n    var rest = getUnhandledProps(Message, this.props);\n    var ElementType = getElementType(Message, this.props);\n\n    if (!childrenUtils.isNil(children)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), dismissIcon, children);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), dismissIcon, Icon.create(icon, {\n      autoGenerateKey: false\n    }), (!_isNil(header) || !_isNil(content) || !_isNil(list)) && /*#__PURE__*/React.createElement(MessageContent, null, MessageHeader.create(header, {\n      autoGenerateKey: false\n    }), MessageList.create(list, {\n      autoGenerateKey: false\n    }), createHTMLParagraph(content, {\n      autoGenerateKey: false\n    })));\n  };\n\n  return Message;\n}(Component);\n\nMessage.handledProps = [\"as\", \"attached\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"error\", \"floating\", \"header\", \"hidden\", \"icon\", \"info\", \"list\", \"negative\", \"onDismiss\", \"positive\", \"size\", \"success\", \"visible\", \"warning\"];\nexport { Message as default };\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A message can be formatted to attach itself to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['bottom', 'top'])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A message can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A message can only take up the width of its content. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `negative`. */\n  error: PropTypes.bool,\n\n  /** A message can float above content that it is related to. */\n  floating: PropTypes.bool,\n\n  /** Shorthand for MessageHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** A message can be hidden. */\n  hidden: PropTypes.bool,\n\n  /** A message can contain an icon. */\n  icon: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.bool]),\n\n  /** A message may be formatted to display information. */\n  info: PropTypes.bool,\n\n  /** Array shorthand items for the MessageList. Mutually exclusive with children. */\n  list: customPropTypes.collectionShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `error`. */\n  negative: PropTypes.bool,\n\n  /**\n   * A message that the user can choose to hide.\n   * Called when the user clicks the \"x\" icon. This also adds the \"x\" icon.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onDismiss: PropTypes.func,\n\n  /** A message may be formatted to display a positive message.  Same as `success`. */\n  positive: PropTypes.bool,\n\n  /** A message can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A message may be formatted to display a positive message.  Same as `positive`. */\n  success: PropTypes.bool,\n\n  /** A message can be set to visible to force itself to be shown. */\n  visible: PropTypes.bool,\n\n  /** A message may be formatted to display warning messages. */\n  warning: PropTypes.bool\n} : {};\nMessage.Content = MessageContent;\nMessage.Header = MessageHeader;\nMessage.List = MessageList;\nMessage.Item = MessageItem;","import React, { useState } from 'react';\r\nimport { Segment, Container, Form, Message, Checkbox, Divider } from 'semantic-ui-react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { activationInfoChanged, postActivationCode, reSendActivationCode } from '../../../actions';\r\n\r\n\r\nconst Activation = ({ t, activationInfoChanged, loading, error, postActivationCode, reSendActivationCode }) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [code, setCode] = useState('');\r\n    const [showResend, setShowResend] = useState(false);\r\n\r\n    const onFocus = () => activationInfoChanged({ props: 'error', value: '' });\r\n\r\n    const validatePostActivation = () => {\r\n        if (!code) {\r\n            return false;\r\n        }\r\n        onFocus();\r\n        return true;\r\n    };\r\n    const validateResendActivation = () => {\r\n        if (!userName) {\r\n            return false;\r\n        }\r\n        onFocus();\r\n        return true;\r\n    };\r\n    const onActivatePressed = () => {\r\n        if (validatePostActivation()) {\r\n            postActivationCode(code);\r\n        }\r\n    };\r\n    const onResendPressed = () => {\r\n        if (validateResendActivation()) {\r\n            reSendActivationCode(userName, setShowResend);\r\n        }\r\n    };\r\n    const renderErrorMsg = () => {\r\n        if (!error) return;\r\n        return <Message negative icon='x' header={t('Error')} content={error} />;\r\n    };\r\n\r\n    const renderPostActivationForm = () => {\r\n        if (!showResend) return (\r\n            <Form loading={loading}>\r\n                <Form.Input\r\n                    fluid\r\n                    type='password'\r\n                    label={t('ActivationCode')}\r\n                    placeholder='*********'\r\n                    required\r\n                    icon='lock'\r\n                    size='huge'\r\n                    maxLength={20}\r\n                    minLength={3}\r\n                    iconPosition='left'\r\n                    value={code}\r\n                    onChange={(e, { value }) => setCode(value)}\r\n                    onFocus={onFocus}\r\n                    autoComplete=\"on\"\r\n                />\r\n                <Form.Button color='green' fluid onClick={onActivatePressed}>{t('Activate').toUpperCase()}</Form.Button>\r\n            </Form>\r\n        );\r\n    };\r\n\r\n    const renderResendForm = () => {\r\n        if (showResend) return (\r\n            <Form loading={loading}>\r\n                <Form.Input\r\n                    fluid\r\n                    type='text'\r\n                    label={t('UserName')}\r\n                    placeholder='example123'\r\n                    required\r\n                    icon='mail'\r\n                    size='huge'\r\n                    maxLength={50}\r\n                    iconPosition='left'\r\n                    value={userName}\r\n                    onChange={(e, { value }) => setUserName(value.toLowerCase())}\r\n                    onFocus={onFocus}\r\n                />\r\n                <Form.Button color='green' fluid onClick={onResendPressed}> {t('SendAgain').toUpperCase()}</Form.Button >\r\n            </Form>\r\n        );\r\n    };\r\n    return (\r\n        <Segment basic >\r\n            <Container style={{ width: '50vw', padding: 20 }}>\r\n                <Segment style={{ backgroundColor: 'rgba(122, 123, 32, 0.3)' }}>\r\n                    {renderErrorMsg()}\r\n                    {renderPostActivationForm()}\r\n                    {renderResendForm()}\r\n                    <Divider />\r\n                    <Checkbox label={t('DidntReceive')} checked={showResend} onChange={(e, { checked }) => {\r\n                        onFocus();\r\n                        setShowResend(checked);\r\n                    }} />\r\n                </Segment>\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ activation }) => {\r\n    const { loading, error } = activation;\r\n    return { loading, error };\r\n};\r\n\r\nexport default withTranslation()(connect(mapStateToProps, { activationInfoChanged, postActivationCode, reSendActivationCode })(Activation));\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n/**\n * A container limits content to a maximum width.\n */\n\nfunction Container(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      text = props.text,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nContainer.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"text\", \"textAlign\"];\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;"],"sourceRoot":""}